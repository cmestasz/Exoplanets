//
// Types in assemblies: Assembly-CSharp
// Generated 28/11/2024 17:48:13
//
/* eslint-disable */

import { ReactUnity, System, UnityEngine } from '@reactunity/renderer';

export declare class CalibrationInputController {
  constructor();
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class WebcamDisplayController {
  constructor();
  static Instance: WebcamDisplayController;
  WebcamTexture: UnityEngine.WebCamTexture;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class AdjustCamera {
  constructor();
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  canvas: UnityEngine.Canvas;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class AuthServer {
  constructor();
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  SetHandleCode(handleCode: any, titlePage: string, titlePageError: string, mainMessage: string, mainMessageError: string, subMessage: string, subMessageError: string, repo: string, email: string): void;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class LoadEnv {
  constructor();
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class MainStar {
  constructor();
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  rotationSpeed: number;
  customMaterial: UnityEngine.Material;
  react: ReactUnity.UGUI.ReactRendererUGUI;
  prefab: UnityEngine.GameObject;
  Mount(cmp: ReactUnity.UGUI.PrefabComponent): void;
  SetProperty(propertyName: string, value: any): boolean;
  AddEventListener(eventName: string, callback: ReactUnity.Helpers.Callback): (() => void);
  Unmount(cmp: ReactUnity.UGUI.PrefabComponent): void;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class MoveSkybox {
  constructor();
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  speed: number;
  directionalLight: UnityEngine.Light;
  tiltAngle: number;
  offSet: number;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class APIConnector {
  constructor();
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class DialogueController {
  constructor();
  static Instance: DialogueController;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  ShowDialogue(key: string, delay?: number): void;
  WriteText(dialogue: Dialogue): void;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class KeyboardBindings {
  static FORWARD: UnityEngine.KeyCode;
  static BACKWARD: UnityEngine.KeyCode;
  static LEFT: UnityEngine.KeyCode;
  static RIGHT: UnityEngine.KeyCode;
  static SAVE_STARS: UnityEngine.KeyCode;
  static SAVE_CONSTELLATION: UnityEngine.KeyCode;
  static ADD_TO_CONSTELLATION: UnityEngine.KeyCode;
  static TOGGLE_INPUT: UnityEngine.KeyCode;
  static SPEED_UP: UnityEngine.KeyCode;
  static WARP_POS: UnityEngine.KeyCode;
  static WARP_ID: UnityEngine.KeyCode;
  static GET_INFO: UnityEngine.KeyCode;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SettingsManager {
  constructor();
  static Language: string;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  static instance: SettingsManager;
  InitialConfig(): void;
  ReloadConfig(): void;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class Animations {
  constructor();
  static WarpFadeIn(colorAdjustments: UnityEngine.Rendering.Universal.ColorAdjustments): System.Collections.IEnumerator;
  static WarpFadeOut(colorAdjustments: UnityEngine.Rendering.Universal.ColorAdjustments): System.Collections.IEnumerator;
  static TitleFadeIn(titleText: TMPro.TMP_Text): System.Collections.IEnumerator;
  static TitleFadeOut(titleText: TMPro.TMP_Text): System.Collections.IEnumerator;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class Constants {
  constructor();
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class ConstellationController {
  constructor();
  static Current: ConstellationController;
  Parent: UnityEngine.Transform;
  Constellation: Constellation;
  Info: string;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  static constellations: System.Collections.Generic.Dictionary;
  static InitConstellation(prefab: UnityEngine.GameObject, parent: UnityEngine.Transform, relative: SpaceCoord): ConstellationController;
  static AddConnection(star1: StarController, star2: StarController, connectionPrefab: UnityEngine.GameObject): void;
  static SaveConstellation(name: string): void;
  static SaveConstellationCoroutine(): System.Collections.IEnumerator;
  static BuildConstellation(constellation: Constellation, prefab: UnityEngine.GameObject, connectionPrefab: UnityEngine.GameObject, parent: UnityEngine.Transform): ConstellationController;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class ConstellationOld {
  constructor();
  Id: string;
  IsSaved: boolean;
  Connections: System.Collections.Generic.HashSet<System.Tuple<StarController, StarController>>;
  static Constellations: System.Collections.Generic.Dictionary;
  static CreateConstellation(): ConstellationOld;
  static PermanentSaveAll(): void;
  AddConnection(star1: StarController, star2: StarController): void;
  Save(id: string): void;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class Dialogues {
  static DIALOGUES: System.Collections.Generic.Dictionary;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare interface IHasInfo {
  Info: string;
}
export declare class Dialogue {
  constructor();
  delay: number;
  text: string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class Error {
  constructor();
  detail: string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class Star {
  constructor();
  x: number;
  y: number;
  z: number;
  id: string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class Exoplanet {
  constructor();
  ra: number;
  dec: number;
  dist: number;
  name: string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class ConstellationStar {
  constructor();
  ext_id: string;
  connected_stars: string[];
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class Constellation {
  constructor();
  ra: number;
  dec: number;
  dist: number;
  id: number;
  name: string;
  stars: ConstellationStar[];
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SpaceCoord {
  constructor();
  constructor(ra: number, dec: number, dist: number);
  ra: number;
  dec: number;
  dist: number;
  ToString(): string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
}
export declare class PlanetController {
  constructor();
  Id: string;
  RelativePosition: UnityEngine.Vector3;
  Info: string;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  static planets: System.Collections.Generic.Dictionary;
  static CreatePlanet(id: string, prefab: UnityEngine.GameObject, position: UnityEngine.Vector3, scale: number, parent: UnityEngine.Transform, relativePosition: UnityEngine.Vector3): PlanetController;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class PlayerController {
  constructor();
  static Instance: PlayerController;
  ConnectionLine: UnityEngine.LineRenderer;
  CurrentStar: StarController;
  CurrentSector: UnityEngine.Vector3Int;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class SurroundingsPosRequest {
  constructor();
  ra: number;
  dec: number;
  dist: number;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SurroundingsIdRequest {
  constructor();
  id: string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SurroundingsPosResponse {
  constructor();
  stars: Star[];
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SurroundingsIdResponse {
  constructor();
  stars: Star[];
  name: string;
  ra: number;
  dec: number;
  dist: number;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class AllConstellationsRequest {
  constructor();
  user_id: number;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class ConstellationsResponse {
  constructor();
  constellations: Constellation[];
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class ActiveConstellationsRequest {
  constructor();
  user_id: number;
  ra: number;
  dec: number;
  dist: number;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class CreateConstellationRequest {
  constructor();
  user_id: number;
  constellation: Constellation;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class CreateConstellationResponse {
  constructor();
  message: string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class Cursor {
  constructor();
  x: number;
  y: number;
  IsValid(): boolean;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class Rotation {
  constructor();
  dx: number;
  dy: number;
  IsValid(): boolean;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class InputResponse {
  constructor();
  cursor: Cursor;
  right_gesture: string;
  rotation: Rotation;
  zoom: number;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SerializableConstellation {
  constructor(constellation: ConstellationOld);
  Id: string;
  ConnectionsL: SerializableStar[];
  ConnectionsR: SerializableStar[];
  PermanentSave(): void;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SerializableStar {
  constructor(starController: StarController);
  Id: string;
  Position: UnityEngine.Vector3;
  Scale: number;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SpaceController {
  constructor();
  static Instance: SpaceController;
  CurrentPlanet: UnityEngine.GameObject;
  ConstellationParent: UnityEngine.Transform;
  StarsParent: UnityEngine.Transform;
  CurrentReference: SpaceCoord;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  WarpToPos(pos: SpaceCoord): void;
  WarpToId(id: string): void;
  AddConstellationConnection(star1: StarController, star2: StarController): void;
  SaveConstellation(name: string): void;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class StarController {
  constructor();
  Id: string;
  Info: string;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  static stars: System.Collections.Generic.Dictionary;
  static CreateStar(id: string, prefab: UnityEngine.GameObject, position: UnityEngine.Vector3, parent: UnityEngine.Transform): StarController;
  static GetStar(id: string): StarController;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class UIInteractor {
  constructor();
  static Instance: UIInteractor;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  GetConstellationName(): string;
  SetInfoText(text: string): void;
  GetWarpPosition(): SpaceCoord;
  GetWarpId(): string;
  ShowTitle(title: string): void;
  MoveCrosshair(position: UnityEngine.Vector2): void;
  GetCanvasSize(): UnityEngine.Vector2;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class Utils {
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
