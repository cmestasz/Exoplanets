//
// Types in assemblies: Assembly-CSharp
// Generated 15/11/2024 17:20:57
//
/* eslint-disable */

import { System, UnityEngine } from '@reactunity/renderer';

export declare class CalibrationInputController {
  constructor();
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class WebcamDisplayController {
  constructor();
  static Instance: WebcamDisplayController;
  WebcamTexture: UnityEngine.WebCamTexture;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class LocalServer {
  constructor();
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  StartServer(): void;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class MoveSkybox {
  constructor();
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  speed: number;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class APIConnector {
  constructor();
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class KeyboardBindings {
  static FORWARD: UnityEngine.KeyCode;
  static BACKWARD: UnityEngine.KeyCode;
  static LEFT: UnityEngine.KeyCode;
  static RIGHT: UnityEngine.KeyCode;
  static SAVE_STARS: UnityEngine.KeyCode;
  static SAVE_CONSTELLATION: UnityEngine.KeyCode;
  static ADD_TO_CONSTELLATION: UnityEngine.KeyCode;
  static TOGGLE_INPUT: UnityEngine.KeyCode;
  static SPEED_UP: UnityEngine.KeyCode;
  static WARP: UnityEngine.KeyCode;
  static GET_INFO: UnityEngine.KeyCode;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SettingsManager {
  constructor();
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  static instance: SettingsManager;
  InitialConfig(): void;
  ReloadConfig(): void;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class Constants {
  constructor();
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class Constellation {
  constructor();
  Id: string;
  IsSaved: boolean;
  Connections: System.Collections.Generic.HashSet<System.Tuple<StarController, StarController>>;
  static Constellations: System.Collections.Generic.Dictionary;
  static CreateConstellation(): Constellation;
  static PermanentSaveAll(): void;
  AddConnection(star1: StarController, star2: StarController): void;
  Save(id: string): void;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class ConstellationBuilder {
  constructor(constellationConnectionPrefab: UnityEngine.GameObject, connectionsParent: UnityEngine.Transform);
  ConnectionsParent: UnityEngine.Transform;
  ConstellationConnectionPrefab: UnityEngine.GameObject;
  ConstellationLines: UnityEngine.LineRenderer[];
  CurrentConstellation: Constellation;
  AddConnection(star1: StarController, star2: StarController): void;
  ClearConnections(): void;
  SaveConstellation(id: string): void;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare interface IHasInfo {
  Info: string;
}
export declare class Star {
  constructor();
  x: number;
  y: number;
  z: number;
  name: string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class Exoplanet {
  constructor();
  ra: number;
  dec: number;
  dist: number;
  name: string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SpaceCoord {
  constructor();
  constructor(ra: number, dec: number, parallax: number);
  ra: number;
  dec: number;
  parallax: number;
  ToString(): string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
}
export declare class PlanetController {
  constructor();
  Id: string;
  RelativePosition: UnityEngine.Vector3;
  Info: string;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  static planets: System.Collections.Generic.Dictionary;
  static CreatePlanet(id: string, prefab: UnityEngine.GameObject, position: UnityEngine.Vector3, scale: number, parent: UnityEngine.Transform, relativePosition: UnityEngine.Vector3): PlanetController;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class PlayerController {
  constructor();
  ConnectionLine: UnityEngine.LineRenderer;
  CurrentStar: StarController;
  CurrentSector: UnityEngine.Vector3Int;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class SurroundingsRequest {
  constructor();
  ra: number;
  dec: number;
  parallax: number;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SurroundingsResponse {
  constructor();
  stars: Star[];
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class ExoplanetsByNameRequest {
  constructor();
  name: string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class ExoplanetsResponse {
  constructor();
  exoplanets: Exoplanet[];
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class InputResponse {
  constructor();
  action: string;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SerializableConstellation {
  constructor(constellation: Constellation);
  Id: string;
  ConnectionsL: SerializableStar[];
  ConnectionsR: SerializableStar[];
  PermanentSave(): void;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SerializableStar {
  constructor(starController: StarController);
  Id: string;
  Position: UnityEngine.Vector3;
  Scale: number;
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
export declare class SpaceController {
  constructor();
  static Instance: SpaceController;
  ConstellationBuilder: ConstellationBuilder;
  StarsParent: UnityEngine.Transform;
  PlanetsParent: UnityEngine.Transform;
  CurrentRelativePosition: SpaceCoord;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  WarpTo(pos: SpaceCoord): void;
  LoadConstellations(): void;
  AddConstellationConnection(star1: StarController, star2: StarController): void;
  SaveConstellation(name: string): void;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class StarController {
  constructor();
  static RelativePosition: UnityEngine.Vector3;
  Id: string;
  Info: string;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  static stars: System.Collections.Generic.Dictionary;
  static CreateStar(id: string, prefab: UnityEngine.GameObject, position: UnityEngine.Vector3, parent: UnityEngine.Transform): StarController;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class UIInteractor {
  constructor();
  static Instance: UIInteractor;
  destroyCancellationToken: System.Threading.CancellationToken;
  useGUILayout: boolean;
  runInEditMode: boolean;
  enabled: boolean;
  isActiveAndEnabled: boolean;
  transform: UnityEngine.Transform;
  gameObject: UnityEngine.GameObject;
  tag: string;
  rigidbody: UnityEngine.Component;
  rigidbody2D: UnityEngine.Component;
  camera: UnityEngine.Component;
  light: UnityEngine.Component;
  animation: UnityEngine.Component;
  constantForce: UnityEngine.Component;
  renderer: UnityEngine.Component;
  audio: UnityEngine.Component;
  networkView: UnityEngine.Component;
  collider: UnityEngine.Component;
  collider2D: UnityEngine.Component;
  hingeJoint: UnityEngine.Component;
  particleSystem: UnityEngine.Component;
  name: string;
  hideFlags: UnityEngine.HideFlags;
  GetConstellationName(): string;
  SetInfoText(text: string): void;
  GetWarpPosition(): SpaceCoord;
  IsInvoking(): boolean;
  CancelInvoke(): void;
  Invoke(methodName: string, time: number): void;
  InvokeRepeating(methodName: string, time: number, repeatRate: number): void;
  CancelInvoke(methodName: string): void;
  IsInvoking(methodName: string): boolean;
  StartCoroutine(methodName: string): UnityEngine.Coroutine;
  StartCoroutine(methodName: string, value: any): UnityEngine.Coroutine;
  StartCoroutine(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StartCoroutine_Auto(routine: System.Collections.IEnumerator): UnityEngine.Coroutine;
  StopCoroutine(routine: System.Collections.IEnumerator): void;
  StopCoroutine(routine: UnityEngine.Coroutine): void;
  StopCoroutine(methodName: string): void;
  StopAllCoroutines(): void;
  GetComponent(type: System.Type): UnityEngine.Component;
  GetComponent(type: string): UnityEngine.Component;
  GetComponentInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInChildren(t: System.Type): UnityEngine.Component;
  GetComponentsInChildren(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInChildren(t: System.Type): UnityEngine.Component[];
  GetComponentInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component;
  GetComponentInParent(t: System.Type): UnityEngine.Component;
  GetComponentsInParent(t: System.Type, includeInactive: boolean): UnityEngine.Component[];
  GetComponentsInParent(t: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type): UnityEngine.Component[];
  GetComponents(type: System.Type, results: UnityEngine.Component[]): void;
  GetComponentIndex(): number;
  CompareTag(tag: string): boolean;
  SendMessageUpwards(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessageUpwards(methodName: string, value: any): void;
  SendMessageUpwards(methodName: string): void;
  SendMessageUpwards(methodName: string, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, value: any): void;
  SendMessage(methodName: string): void;
  SendMessage(methodName: string, value: any, options: UnityEngine.SendMessageOptions): void;
  SendMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any, options: UnityEngine.SendMessageOptions): void;
  BroadcastMessage(methodName: string, parameter: any): void;
  BroadcastMessage(methodName: string): void;
  BroadcastMessage(methodName: string, options: UnityEngine.SendMessageOptions): void;
  GetInstanceID(): number;
  GetHashCode(): number;
  Equals(other: any): boolean;
  ToString(): string;
  GetType(): System.Type;
}
export declare class Utils {
  constructor();
  Equals(obj: any): boolean;
  GetHashCode(): number;
  GetType(): System.Type;
  ToString(): string;
}
