diff --git a/dist/esm/PostgrestBuilder.d.ts b/dist/esm/PostgrestBuilder.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..8c7ab8d71cba877e7f9e76b7515e60b7373dbfef
--- /dev/null
+++ b/dist/esm/PostgrestBuilder.d.ts
@@ -0,0 +1,26 @@
+import type { Fetch, PostgrestSingleResponse } from './types';
+export default abstract class PostgrestBuilder<Result> implements PromiseLike<PostgrestSingleResponse<Result>> {
+    protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE';
+    protected url: URL;
+    protected headers: Record<string, string>;
+    protected schema?: string;
+    protected body?: unknown;
+    protected shouldThrowOnError: boolean;
+    protected signal?: AbortSignal;
+    protected fetch: Fetch;
+    protected isMaybeSingle: boolean;
+    constructor(builder: PostgrestBuilder<Result>);
+    /**
+     * If there's an error with the query, throwOnError will reject the promise by
+     * throwing the error instead of returning it as part of a successful response.
+     *
+     * {@link https://github.com/supabase/supabase-js/issues/92}
+     */
+    throwOnError(): this;
+    /**
+     * Set an HTTP header for the request.
+     */
+    setHeader(name: string, value: string): this;
+    then<TResult1 = PostgrestSingleResponse<Result>, TResult2 = never>(onfulfilled?: ((value: PostgrestSingleResponse<Result>) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;
+}
+//# sourceMappingURL=PostgrestBuilder.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestBuilder.d.ts.map b/dist/esm/PostgrestBuilder.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..0f5e9f7feba8409f935cad3d5909cb1b76bf72ac
--- /dev/null
+++ b/dist/esm/PostgrestBuilder.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestBuilder.d.ts","sourceRoot":"","sources":["../../src/PostgrestBuilder.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,KAAK,EAAE,uBAAuB,EAAE,MAAM,SAAS,CAAA;AAG7D,MAAM,CAAC,OAAO,CAAC,QAAQ,OAAO,gBAAgB,CAAC,MAAM,CACnD,YAAW,WAAW,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;IAEvD,SAAS,CAAC,MAAM,EAAE,KAAK,GAAG,MAAM,GAAG,MAAM,GAAG,OAAO,GAAG,QAAQ,CAAA;IAC9D,SAAS,CAAC,GAAG,EAAE,GAAG,CAAA;IAClB,SAAS,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;IACzC,SAAS,CAAC,MAAM,CAAC,EAAE,MAAM,CAAA;IACzB,SAAS,CAAC,IAAI,CAAC,EAAE,OAAO,CAAA;IACxB,SAAS,CAAC,kBAAkB,UAAQ;IACpC,SAAS,CAAC,MAAM,CAAC,EAAE,WAAW,CAAA;IAC9B,SAAS,CAAC,KAAK,EAAE,KAAK,CAAA;IACtB,SAAS,CAAC,aAAa,EAAE,OAAO,CAAA;gBAEpB,OAAO,EAAE,gBAAgB,CAAC,MAAM,CAAC;IAmB7C;;;;;OAKG;IACH,YAAY,IAAI,IAAI;IAKpB;;OAEG;IACH,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,GAAG,IAAI;IAM5C,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,MAAM,CAAC,EAAE,QAAQ,GAAG,KAAK,EAC/D,WAAW,CAAC,EACR,CAAC,CAAC,KAAK,EAAE,uBAAuB,CAAC,MAAM,CAAC,KAAK,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,GAC9E,SAAS,GACT,IAAI,EACR,UAAU,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,GAAG,KAAK,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,GAAG,SAAS,GAAG,IAAI,GAClF,WAAW,CAAC,QAAQ,GAAG,QAAQ,CAAC;CAuIpC"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestBuilder.js b/dist/esm/PostgrestBuilder.js
new file mode 100644
index 0000000000000000000000000000000000000000..df4b7ccd0b6159268caa5c083c8e439a1568cda7
--- /dev/null
+++ b/dist/esm/PostgrestBuilder.js
@@ -0,0 +1,187 @@
+// @ts-ignore
+import nodeFetch from '@supabase/node-fetch';
+import PostgrestError from './PostgrestError';
+export default class PostgrestBuilder {
+    constructor(builder) {
+        this.shouldThrowOnError = false;
+        this.method = builder.method;
+        this.url = builder.url;
+        this.headers = builder.headers;
+        this.schema = builder.schema;
+        this.body = builder.body;
+        this.shouldThrowOnError = builder.shouldThrowOnError;
+        this.signal = builder.signal;
+        this.isMaybeSingle = builder.isMaybeSingle;
+        if (builder.fetch) {
+            this.fetch = builder.fetch;
+        }
+        else if (typeof fetch === 'undefined') {
+            this.fetch = nodeFetch;
+        }
+        else {
+            this.fetch = fetch;
+        }
+    }
+    /**
+     * If there's an error with the query, throwOnError will reject the promise by
+     * throwing the error instead of returning it as part of a successful response.
+     *
+     * {@link https://github.com/supabase/supabase-js/issues/92}
+     */
+    throwOnError() {
+        this.shouldThrowOnError = true;
+        return this;
+    }
+    /**
+     * Set an HTTP header for the request.
+     */
+    setHeader(name, value) {
+        this.headers = Object.assign({}, this.headers);
+        this.headers[name] = value;
+        return this;
+    }
+    then(onfulfilled, onrejected) {
+        // https://postgrest.org/en/stable/api.html#switching-schemas
+        if (this.schema === undefined) {
+            // skip
+        }
+        else if (['GET', 'HEAD'].includes(this.method)) {
+            this.headers['Accept-Profile'] = this.schema;
+        }
+        else {
+            this.headers['Content-Profile'] = this.schema;
+        }
+        if (this.method !== 'GET' && this.method !== 'HEAD') {
+            this.headers['Content-Type'] = 'application/json';
+        }
+        // NOTE: Invoke w/o `this` to avoid illegal invocation error.
+        // https://github.com/supabase/postgrest-js/pull/247
+        const _fetch = this.fetch;
+        console.log('Fetch info to send: \nURL: ', this.url.toString()); console.log('\nMethod: ', this.method);
+        console.log('\nHeaders: Is null?: ', this.headers === null);
+        Object.entries(this.headers).forEach(([key, value]) => {
+            console.log(key, ': ', value);
+        });
+        console.log('\nBody: ', this.body);
+        console.log('\nSignal: ', this.signal);
+        let res = _fetch(this.url.toString(), {
+            method: this.method,
+            headers: this.headers,
+            body: JSON.stringify(this.body),
+            signal: this.signal,
+        }).then(async (res) => {
+            var _a, _b, _c;
+            let error = null;
+            let data = null;
+            let count = null;
+            let status = res.status;
+            let statusText = res.statusText;
+            if (res.ok) {
+                if (this.method !== 'HEAD') {
+                    const body = await res.text();
+                    if (body === '') {
+                        // Prefer: return=minimal
+                    }
+                    else if (this.headers['Accept'] === 'text/csv') {
+                        data = body;
+                    }
+                    else if (this.headers['Accept'] &&
+                        this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {
+                        data = body;
+                    }
+                    else {
+                        data = JSON.parse(body);
+                    }
+                }
+                const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);
+                const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');
+                if (countHeader && contentRange && contentRange.length > 1) {
+                    count = parseInt(contentRange[1]);
+                }
+                // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361
+                // Issue persists e.g. for `.insert([...]).select().maybeSingle()`
+                if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {
+                    if (data.length > 1) {
+                        error = {
+                            // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553
+                            code: 'PGRST116',
+                            details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,
+                            hint: null,
+                            message: 'JSON object requested, multiple (or no) rows returned',
+                        };
+                        data = null;
+                        count = null;
+                        status = 406;
+                        statusText = 'Not Acceptable';
+                    }
+                    else if (data.length === 1) {
+                        data = data[0];
+                    }
+                    else {
+                        data = null;
+                    }
+                }
+            }
+            else {
+                const body = await res.text();
+                try {
+                    error = JSON.parse(body);
+                    // Workaround for https://github.com/supabase/postgrest-js/issues/295
+                    if (Array.isArray(error) && res.status === 404) {
+                        data = [];
+                        error = null;
+                        status = 200;
+                        statusText = 'OK';
+                    }
+                }
+                catch (_d) {
+                    // Workaround for https://github.com/supabase/postgrest-js/issues/295
+                    if (res.status === 404 && body === '') {
+                        status = 204;
+                        statusText = 'No Content';
+                    }
+                    else {
+                        error = {
+                            message: body,
+                        };
+                    }
+                }
+                if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('0 rows'))) {
+                    error = null;
+                    status = 200;
+                    statusText = 'OK';
+                }
+                if (error && this.shouldThrowOnError) {
+                    throw new PostgrestError(error);
+                }
+            }
+            const postgrestResponse = {
+                error,
+                data,
+                count,
+                status,
+                statusText,
+            };
+            return postgrestResponse;
+        });
+        if (!this.shouldThrowOnError) {
+            res = res.catch((fetchError) => {
+                var _a, _b, _c;
+                return ({
+                    error: {
+                        message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,
+                        details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,
+                        hint: '',
+                        code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`,
+                    },
+                    data: null,
+                    count: null,
+                    status: 0,
+                    statusText: '',
+                });
+            });
+        }
+        return res.then(onfulfilled, onrejected);
+    }
+}
+//# sourceMappingURL=PostgrestBuilder.js.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestBuilder.js.map b/dist/esm/PostgrestBuilder.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..b4d9a73e27f1f3bd61ebb8b00cc4a6bfc2f26ee6
--- /dev/null
+++ b/dist/esm/PostgrestBuilder.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestBuilder.js","sourceRoot":"","sources":["../../src/PostgrestBuilder.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestClient.d.ts b/dist/esm/PostgrestClient.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d6cd5e4009793c1065637b83761e87f538272283
--- /dev/null
+++ b/dist/esm/PostgrestClient.d.ts
@@ -0,0 +1,72 @@
+import PostgrestQueryBuilder from './PostgrestQueryBuilder';
+import PostgrestFilterBuilder from './PostgrestFilterBuilder';
+import { Fetch, GenericSchema } from './types';
+/**
+ * PostgREST client.
+ *
+ * @typeParam Database - Types for the schema from the [type
+ * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)
+ *
+ * @typeParam SchemaName - Postgres schema to switch to. Must be a string
+ * literal, the same one passed to the constructor. If the schema is not
+ * `"public"`, this must be supplied manually.
+ */
+export default class PostgrestClient<Database = any, SchemaName extends string & keyof Database = 'public' extends keyof Database ? 'public' : string & keyof Database, Schema extends GenericSchema = Database[SchemaName] extends GenericSchema ? Database[SchemaName] : any> {
+    url: string;
+    headers: Record<string, string>;
+    schemaName?: SchemaName;
+    fetch?: Fetch;
+    /**
+     * Creates a PostgREST client.
+     *
+     * @param url - URL of the PostgREST endpoint
+     * @param options - Named parameters
+     * @param options.headers - Custom headers
+     * @param options.schema - Postgres schema to switch to
+     * @param options.fetch - Custom fetch
+     */
+    constructor(url: string, { headers, schema, fetch, }?: {
+        headers?: Record<string, string>;
+        schema?: SchemaName;
+        fetch?: Fetch;
+    });
+    from<TableName extends string & keyof Schema['Tables'], Table extends Schema['Tables'][TableName]>(relation: TableName): PostgrestQueryBuilder<Schema, Table, TableName>;
+    from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(relation: ViewName): PostgrestQueryBuilder<Schema, View, ViewName>;
+    /**
+     * Select a schema to query or perform an function (rpc) call.
+     *
+     * The schema needs to be on the list of exposed schemas inside Supabase.
+     *
+     * @param schema - The schema to query
+     */
+    schema<DynamicSchema extends string & keyof Database>(schema: DynamicSchema): PostgrestClient<Database, DynamicSchema, Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any>;
+    /**
+     * Perform a function call.
+     *
+     * @param fn - The function name to call
+     * @param args - The arguments to pass to the function call
+     * @param options - Named parameters
+     * @param options.head - When set to `true`, `data` will not be returned.
+     * Useful if you only need the count.
+     * @param options.get - When set to `true`, the function will be called with
+     * read-only access mode.
+     * @param options.count - Count algorithm to use to count rows returned by the
+     * function. Only applicable for [set-returning
+     * functions](https://www.postgresql.org/docs/current/functions-srf.html).
+     *
+     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
+     * hood.
+     *
+     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
+     * statistics under the hood.
+     *
+     * `"estimated"`: Uses exact count for low numbers and planned count for high
+     * numbers.
+     */
+    rpc<FnName extends string & keyof Schema['Functions'], Fn extends Schema['Functions'][FnName]>(fn: FnName, args?: Fn['Args'], { head, get, count, }?: {
+        head?: boolean;
+        get?: boolean;
+        count?: 'exact' | 'planned' | 'estimated';
+    }): PostgrestFilterBuilder<Schema, Fn['Returns'] extends any[] ? Fn['Returns'][number] extends Record<string, unknown> ? Fn['Returns'][number] : never : never, Fn['Returns']>;
+}
+//# sourceMappingURL=PostgrestClient.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestClient.d.ts.map b/dist/esm/PostgrestClient.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..ed6f3861b77ab5ea465bdd5ab25b22aaa6aef3b1
--- /dev/null
+++ b/dist/esm/PostgrestClient.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestClient.d.ts","sourceRoot":"","sources":["../../src/PostgrestClient.ts"],"names":[],"mappings":"AAAA,OAAO,qBAAqB,MAAM,yBAAyB,CAAA;AAC3D,OAAO,sBAAsB,MAAM,0BAA0B,CAAA;AAG7D,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,MAAM,SAAS,CAAA;AAE9C;;;;;;;;;GASG;AACH,MAAM,CAAC,OAAO,OAAO,eAAe,CAClC,QAAQ,GAAG,GAAG,EACd,UAAU,SAAS,MAAM,GAAG,MAAM,QAAQ,GAAG,QAAQ,SAAS,MAAM,QAAQ,GACxE,QAAQ,GACR,MAAM,GAAG,MAAM,QAAQ,EAC3B,MAAM,SAAS,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAS,aAAa,GACrE,QAAQ,CAAC,UAAU,CAAC,GACpB,GAAG;IAEP,GAAG,EAAE,MAAM,CAAA;IACX,OAAO,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;IAC/B,UAAU,CAAC,EAAE,UAAU,CAAA;IACvB,KAAK,CAAC,EAAE,KAAK,CAAA;IAGb;;;;;;;;OAQG;gBAED,GAAG,EAAE,MAAM,EACX,EACE,OAAY,EACZ,MAAM,EACN,KAAK,GACN,GAAE;QACD,OAAO,CAAC,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;QAChC,MAAM,CAAC,EAAE,UAAU,CAAA;QACnB,KAAK,CAAC,EAAE,KAAK,CAAA;KACT;IAQR,IAAI,CACF,SAAS,SAAS,MAAM,GAAG,MAAM,MAAM,CAAC,QAAQ,CAAC,EACjD,KAAK,SAAS,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,EACzC,QAAQ,EAAE,SAAS,GAAG,qBAAqB,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC;IACvE,IAAI,CAAC,QAAQ,SAAS,MAAM,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,EAAE,IAAI,SAAS,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAC1F,QAAQ,EAAE,QAAQ,GACjB,qBAAqB,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC;IAehD;;;;;;OAMG;IACH,MAAM,CAAC,aAAa,SAAS,MAAM,GAAG,MAAM,QAAQ,EAClD,MAAM,EAAE,aAAa,GACpB,eAAe,CAChB,QAAQ,EACR,aAAa,EACb,QAAQ,CAAC,aAAa,CAAC,SAAS,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,GAAG,CAC9E;IAQD;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,GAAG,CAAC,MAAM,SAAS,MAAM,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC,EAAE,EAAE,SAAS,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,EAC3F,EAAE,EAAE,MAAM,EACV,IAAI,GAAE,EAAE,CAAC,MAAM,CAAM,EACrB,EACE,IAAY,EACZ,GAAW,EACX,KAAK,GACN,GAAE;QACD,IAAI,CAAC,EAAE,OAAO,CAAA;QACd,GAAG,CAAC,EAAE,OAAO,CAAA;QACb,KAAK,CAAC,EAAE,OAAO,GAAG,SAAS,GAAG,WAAW,CAAA;KACrC,GACL,sBAAsB,CACvB,MAAM,EACN,EAAE,CAAC,SAAS,CAAC,SAAS,GAAG,EAAE,GACvB,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,SAAS,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GACnD,EAAE,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,GACrB,KAAK,GACP,KAAK,EACT,EAAE,CAAC,SAAS,CAAC,CACd;CAmCF"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestClient.js b/dist/esm/PostgrestClient.js
new file mode 100644
index 0000000000000000000000000000000000000000..6036035fbbcc40180710faf9de6b53fbde4d1bac
--- /dev/null
+++ b/dist/esm/PostgrestClient.js
@@ -0,0 +1,116 @@
+import PostgrestQueryBuilder from './PostgrestQueryBuilder';
+import PostgrestFilterBuilder from './PostgrestFilterBuilder';
+import { DEFAULT_HEADERS } from './constants';
+/**
+ * PostgREST client.
+ *
+ * @typeParam Database - Types for the schema from the [type
+ * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)
+ *
+ * @typeParam SchemaName - Postgres schema to switch to. Must be a string
+ * literal, the same one passed to the constructor. If the schema is not
+ * `"public"`, this must be supplied manually.
+ */
+export default class PostgrestClient {
+    // TODO: Add back shouldThrowOnError once we figure out the typings
+    /**
+     * Creates a PostgREST client.
+     *
+     * @param url - URL of the PostgREST endpoint
+     * @param options - Named parameters
+     * @param options.headers - Custom headers
+     * @param options.schema - Postgres schema to switch to
+     * @param options.fetch - Custom fetch
+     */
+    constructor(url, { headers = {}, schema, fetch, } = {}) {
+        this.url = url;
+        this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);
+        this.schemaName = schema;
+        this.fetch = fetch;
+    }
+    /**
+     * Perform a query on a table or a view.
+     *
+     * @param relation - The table or view name to query
+     */
+    from(relation) {
+        const url = new URL(`${this.url}/${relation}`);
+        return new PostgrestQueryBuilder(url, {
+            headers: Object.assign({}, this.headers),
+            schema: this.schemaName,
+            fetch: this.fetch,
+        });
+    }
+    /**
+     * Select a schema to query or perform an function (rpc) call.
+     *
+     * The schema needs to be on the list of exposed schemas inside Supabase.
+     *
+     * @param schema - The schema to query
+     */
+    schema(schema) {
+        return new PostgrestClient(this.url, {
+            headers: this.headers,
+            schema,
+            fetch: this.fetch,
+        });
+    }
+    /**
+     * Perform a function call.
+     *
+     * @param fn - The function name to call
+     * @param args - The arguments to pass to the function call
+     * @param options - Named parameters
+     * @param options.head - When set to `true`, `data` will not be returned.
+     * Useful if you only need the count.
+     * @param options.get - When set to `true`, the function will be called with
+     * read-only access mode.
+     * @param options.count - Count algorithm to use to count rows returned by the
+     * function. Only applicable for [set-returning
+     * functions](https://www.postgresql.org/docs/current/functions-srf.html).
+     *
+     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
+     * hood.
+     *
+     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
+     * statistics under the hood.
+     *
+     * `"estimated"`: Uses exact count for low numbers and planned count for high
+     * numbers.
+     */
+    rpc(fn, args = {}, { head = false, get = false, count, } = {}) {
+        let method;
+        const url = new URL(`${this.url}/rpc/${fn}`);
+        let body;
+        if (head || get) {
+            method = head ? 'HEAD' : 'GET';
+            Object.entries(args)
+                // params with undefined value needs to be filtered out, otherwise it'll
+                // show up as `?param=undefined`
+                .filter(([_, value]) => value !== undefined)
+                // array values need special syntax
+                .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`])
+                .forEach(([name, value]) => {
+                url.searchParams.append(name, value);
+            });
+        }
+        else {
+            method = 'POST';
+            body = args;
+        }
+        const headers = Object.assign({}, this.headers);
+        if (count) {
+            headers['Prefer'] = `count=${count}`;
+        }
+        return new PostgrestFilterBuilder({
+            method,
+            url,
+            headers,
+            schema: this.schemaName,
+            body,
+            fetch: this.fetch,
+            allowEmpty: false,
+        });
+    }
+}
+//# sourceMappingURL=PostgrestClient.js.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestClient.js.map b/dist/esm/PostgrestClient.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..3e1084cd0a460a563a3fb5a2f3ffd2ea73418809
--- /dev/null
+++ b/dist/esm/PostgrestClient.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestClient.js","sourceRoot":"","sources":["../../src/PostgrestClient.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestError.d.ts b/dist/esm/PostgrestError.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e073f6f8c26cdfd9c97cddd78ae4dd3fe519a865
--- /dev/null
+++ b/dist/esm/PostgrestError.d.ts
@@ -0,0 +1,17 @@
+/**
+ * Error format
+ *
+ * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}
+ */
+export default class PostgrestError extends Error {
+    details: string;
+    hint: string;
+    code: string;
+    constructor(context: {
+        message: string;
+        details: string;
+        hint: string;
+        code: string;
+    });
+}
+//# sourceMappingURL=PostgrestError.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestError.d.ts.map b/dist/esm/PostgrestError.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..7b4b0cdb00863bfb3c322c6ee743383767e07c0a
--- /dev/null
+++ b/dist/esm/PostgrestError.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestError.d.ts","sourceRoot":"","sources":["../../src/PostgrestError.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,MAAM,CAAC,OAAO,OAAO,cAAe,SAAQ,KAAK;IAC/C,OAAO,EAAE,MAAM,CAAA;IACf,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,MAAM,CAAA;gBAEA,OAAO,EAAE;QAAE,OAAO,EAAE,MAAM,CAAC;QAAC,OAAO,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAC;QAAC,IAAI,EAAE,MAAM,CAAA;KAAE;CAOtF"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestError.js b/dist/esm/PostgrestError.js
new file mode 100644
index 0000000000000000000000000000000000000000..0f63d2a32870142a07469857d98b855c3b32c9ec
--- /dev/null
+++ b/dist/esm/PostgrestError.js
@@ -0,0 +1,15 @@
+/**
+ * Error format
+ *
+ * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}
+ */
+export default class PostgrestError extends Error {
+    constructor(context) {
+        super(context.message);
+        this.name = 'PostgrestError';
+        this.details = context.details;
+        this.hint = context.hint;
+        this.code = context.code;
+    }
+}
+//# sourceMappingURL=PostgrestError.js.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestError.js.map b/dist/esm/PostgrestError.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..fb3d22d5d6c89f714fceeb1e7272cd048be91f81
--- /dev/null
+++ b/dist/esm/PostgrestError.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestError.js","sourceRoot":"","sources":["../../src/PostgrestError.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,MAAM,CAAC,OAAO,OAAO,cAAe,SAAQ,KAAK;IAK/C,YAAY,OAAyE;QACnF,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;QACtB,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAA;QAC5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAA;QAC9B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACxB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;IAC1B,CAAC;CACF"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestFilterBuilder.d.ts b/dist/esm/PostgrestFilterBuilder.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7bf7c8082c59713334cb01daf99a5d57c630d5f5
--- /dev/null
+++ b/dist/esm/PostgrestFilterBuilder.d.ts
@@ -0,0 +1,84 @@
+import PostgrestTransformBuilder from './PostgrestTransformBuilder';
+import { GenericSchema } from './types';
+declare type FilterOperator = 'eq' | 'neq' | 'gt' | 'gte' | 'lt' | 'lte' | 'like' | 'ilike' | 'is' | 'in' | 'cs' | 'cd' | 'sl' | 'sr' | 'nxl' | 'nxr' | 'adj' | 'ov' | 'fts' | 'plfts' | 'phfts' | 'wfts';
+export default class PostgrestFilterBuilder<Schema extends GenericSchema, Row extends Record<string, unknown>, Result, RelationName = unknown, Relationships = unknown> extends PostgrestTransformBuilder<Schema, Row, Result, RelationName, Relationships> {
+    eq<ColumnName extends string & keyof Row>(column: ColumnName, value: NonNullable<Row[ColumnName]>): this;
+    eq<Value extends unknown>(column: string, value: NonNullable<Value>): this;
+    neq<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this;
+    neq(column: string, value: unknown): this;
+    gt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this;
+    gt(column: string, value: unknown): this;
+    gte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this;
+    gte(column: string, value: unknown): this;
+    lt<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this;
+    lt(column: string, value: unknown): this;
+    lte<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName]): this;
+    lte(column: string, value: unknown): this;
+    like<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this;
+    like(column: string, pattern: string): this;
+    likeAllOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: readonly string[]): this;
+    likeAllOf(column: string, patterns: readonly string[]): this;
+    likeAnyOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: readonly string[]): this;
+    likeAnyOf(column: string, patterns: readonly string[]): this;
+    ilike<ColumnName extends string & keyof Row>(column: ColumnName, pattern: string): this;
+    ilike(column: string, pattern: string): this;
+    ilikeAllOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: readonly string[]): this;
+    ilikeAllOf(column: string, patterns: readonly string[]): this;
+    ilikeAnyOf<ColumnName extends string & keyof Row>(column: ColumnName, patterns: readonly string[]): this;
+    ilikeAnyOf(column: string, patterns: readonly string[]): this;
+    is<ColumnName extends string & keyof Row>(column: ColumnName, value: Row[ColumnName] & (boolean | null)): this;
+    is(column: string, value: boolean | null): this;
+    in<ColumnName extends string & keyof Row>(column: ColumnName, values: ReadonlyArray<Row[ColumnName]>): this;
+    in(column: string, values: readonly unknown[]): this;
+    contains<ColumnName extends string & keyof Row>(column: ColumnName, value: string | ReadonlyArray<Row[ColumnName]> | Record<string, unknown>): this;
+    contains(column: string, value: string | readonly unknown[] | Record<string, unknown>): this;
+    containedBy<ColumnName extends string & keyof Row>(column: ColumnName, value: string | ReadonlyArray<Row[ColumnName]> | Record<string, unknown>): this;
+    containedBy(column: string, value: string | readonly unknown[] | Record<string, unknown>): this;
+    rangeGt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this;
+    rangeGt(column: string, range: string): this;
+    rangeGte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this;
+    rangeGte(column: string, range: string): this;
+    rangeLt<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this;
+    rangeLt(column: string, range: string): this;
+    rangeLte<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this;
+    rangeLte(column: string, range: string): this;
+    rangeAdjacent<ColumnName extends string & keyof Row>(column: ColumnName, range: string): this;
+    rangeAdjacent(column: string, range: string): this;
+    overlaps<ColumnName extends string & keyof Row>(column: ColumnName, value: string | ReadonlyArray<Row[ColumnName]>): this;
+    overlaps(column: string, value: string | readonly unknown[]): this;
+    textSearch<ColumnName extends string & keyof Row>(column: ColumnName, query: string, options?: {
+        config?: string;
+        type?: 'plain' | 'phrase' | 'websearch';
+    }): this;
+    textSearch(column: string, query: string, options?: {
+        config?: string;
+        type?: 'plain' | 'phrase' | 'websearch';
+    }): this;
+    match<ColumnName extends string & keyof Row>(query: Record<ColumnName, Row[ColumnName]>): this;
+    match(query: Record<string, unknown>): this;
+    not<ColumnName extends string & keyof Row>(column: ColumnName, operator: FilterOperator, value: Row[ColumnName]): this;
+    not(column: string, operator: string, value: unknown): this;
+    /**
+     * Match only rows which satisfy at least one of the filters.
+     *
+     * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST
+     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
+     * to make sure it's properly sanitized.
+     *
+     * It's currently not possible to do an `.or()` filter across multiple tables.
+     *
+     * @param filters - The filters to use, following PostgREST syntax
+     * @param options - Named parameters
+     * @param options.referencedTable - Set this to filter on referenced tables
+     * instead of the parent table
+     * @param options.foreignTable - Deprecated, use `referencedTable` instead
+     */
+    or(filters: string, { foreignTable, referencedTable, }?: {
+        foreignTable?: string;
+        referencedTable?: string;
+    }): this;
+    filter<ColumnName extends string & keyof Row>(column: ColumnName, operator: `${'' | 'not.'}${FilterOperator}`, value: unknown): this;
+    filter(column: string, operator: string, value: unknown): this;
+}
+export {};
+//# sourceMappingURL=PostgrestFilterBuilder.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestFilterBuilder.d.ts.map b/dist/esm/PostgrestFilterBuilder.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..5008c8a0703a17b1d46ee12b030b948e4132d384
--- /dev/null
+++ b/dist/esm/PostgrestFilterBuilder.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestFilterBuilder.d.ts","sourceRoot":"","sources":["../../src/PostgrestFilterBuilder.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestFilterBuilder.js b/dist/esm/PostgrestFilterBuilder.js
new file mode 100644
index 0000000000000000000000000000000000000000..500430f117b5cdcaa31ae1ab1e1063d0600f2a03
--- /dev/null
+++ b/dist/esm/PostgrestFilterBuilder.js
@@ -0,0 +1,375 @@
+import PostgrestTransformBuilder from './PostgrestTransformBuilder';
+export default class PostgrestFilterBuilder extends PostgrestTransformBuilder {
+    /**
+     * Match only rows where `column` is equal to `value`.
+     *
+     * To check if the value of `column` is NULL, you should use `.is()` instead.
+     *
+     * @param column - The column to filter on
+     * @param value - The value to filter with
+     */
+    eq(column, value) {
+        this.url.searchParams.append(column, `eq.${value}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` is not equal to `value`.
+     *
+     * @param column - The column to filter on
+     * @param value - The value to filter with
+     */
+    neq(column, value) {
+        this.url.searchParams.append(column, `neq.${value}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` is greater than `value`.
+     *
+     * @param column - The column to filter on
+     * @param value - The value to filter with
+     */
+    gt(column, value) {
+        this.url.searchParams.append(column, `gt.${value}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` is greater than or equal to `value`.
+     *
+     * @param column - The column to filter on
+     * @param value - The value to filter with
+     */
+    gte(column, value) {
+        this.url.searchParams.append(column, `gte.${value}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` is less than `value`.
+     *
+     * @param column - The column to filter on
+     * @param value - The value to filter with
+     */
+    lt(column, value) {
+        this.url.searchParams.append(column, `lt.${value}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` is less than or equal to `value`.
+     *
+     * @param column - The column to filter on
+     * @param value - The value to filter with
+     */
+    lte(column, value) {
+        this.url.searchParams.append(column, `lte.${value}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` matches `pattern` case-sensitively.
+     *
+     * @param column - The column to filter on
+     * @param pattern - The pattern to match with
+     */
+    like(column, pattern) {
+        this.url.searchParams.append(column, `like.${pattern}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` matches all of `patterns` case-sensitively.
+     *
+     * @param column - The column to filter on
+     * @param patterns - The patterns to match with
+     */
+    likeAllOf(column, patterns) {
+        this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` matches any of `patterns` case-sensitively.
+     *
+     * @param column - The column to filter on
+     * @param patterns - The patterns to match with
+     */
+    likeAnyOf(column, patterns) {
+        this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` matches `pattern` case-insensitively.
+     *
+     * @param column - The column to filter on
+     * @param pattern - The pattern to match with
+     */
+    ilike(column, pattern) {
+        this.url.searchParams.append(column, `ilike.${pattern}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` matches all of `patterns` case-insensitively.
+     *
+     * @param column - The column to filter on
+     * @param patterns - The patterns to match with
+     */
+    ilikeAllOf(column, patterns) {
+        this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` matches any of `patterns` case-insensitively.
+     *
+     * @param column - The column to filter on
+     * @param patterns - The patterns to match with
+     */
+    ilikeAnyOf(column, patterns) {
+        this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` IS `value`.
+     *
+     * For non-boolean columns, this is only relevant for checking if the value of
+     * `column` is NULL by setting `value` to `null`.
+     *
+     * For boolean columns, you can also set `value` to `true` or `false` and it
+     * will behave the same way as `.eq()`.
+     *
+     * @param column - The column to filter on
+     * @param value - The value to filter with
+     */
+    is(column, value) {
+        this.url.searchParams.append(column, `is.${value}`);
+        return this;
+    }
+    /**
+     * Match only rows where `column` is included in the `values` array.
+     *
+     * @param column - The column to filter on
+     * @param values - The values array to filter with
+     */
+    in(column, values) {
+        const cleanedValues = Array.from(new Set(values))
+            .map((s) => {
+            // handle postgrest reserved characters
+            // https://postgrest.org/en/v7.0.0/api.html#reserved-characters
+            if (typeof s === 'string' && new RegExp('[,()]').test(s))
+                return `"${s}"`;
+            else
+                return `${s}`;
+        })
+            .join(',');
+        this.url.searchParams.append(column, `in.(${cleanedValues})`);
+        return this;
+    }
+    /**
+     * Only relevant for jsonb, array, and range columns. Match only rows where
+     * `column` contains every element appearing in `value`.
+     *
+     * @param column - The jsonb, array, or range column to filter on
+     * @param value - The jsonb, array, or range value to filter with
+     */
+    contains(column, value) {
+        if (typeof value === 'string') {
+            // range types can be inclusive '[', ']' or exclusive '(', ')' so just
+            // keep it simple and accept a string
+            this.url.searchParams.append(column, `cs.${value}`);
+        }
+        else if (Array.isArray(value)) {
+            // array
+            this.url.searchParams.append(column, `cs.{${value.join(',')}}`);
+        }
+        else {
+            // json
+            this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);
+        }
+        return this;
+    }
+    /**
+     * Only relevant for jsonb, array, and range columns. Match only rows where
+     * every element appearing in `column` is contained by `value`.
+     *
+     * @param column - The jsonb, array, or range column to filter on
+     * @param value - The jsonb, array, or range value to filter with
+     */
+    containedBy(column, value) {
+        if (typeof value === 'string') {
+            // range
+            this.url.searchParams.append(column, `cd.${value}`);
+        }
+        else if (Array.isArray(value)) {
+            // array
+            this.url.searchParams.append(column, `cd.{${value.join(',')}}`);
+        }
+        else {
+            // json
+            this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);
+        }
+        return this;
+    }
+    /**
+     * Only relevant for range columns. Match only rows where every element in
+     * `column` is greater than any element in `range`.
+     *
+     * @param column - The range column to filter on
+     * @param range - The range to filter with
+     */
+    rangeGt(column, range) {
+        this.url.searchParams.append(column, `sr.${range}`);
+        return this;
+    }
+    /**
+     * Only relevant for range columns. Match only rows where every element in
+     * `column` is either contained in `range` or greater than any element in
+     * `range`.
+     *
+     * @param column - The range column to filter on
+     * @param range - The range to filter with
+     */
+    rangeGte(column, range) {
+        this.url.searchParams.append(column, `nxl.${range}`);
+        return this;
+    }
+    /**
+     * Only relevant for range columns. Match only rows where every element in
+     * `column` is less than any element in `range`.
+     *
+     * @param column - The range column to filter on
+     * @param range - The range to filter with
+     */
+    rangeLt(column, range) {
+        this.url.searchParams.append(column, `sl.${range}`);
+        return this;
+    }
+    /**
+     * Only relevant for range columns. Match only rows where every element in
+     * `column` is either contained in `range` or less than any element in
+     * `range`.
+     *
+     * @param column - The range column to filter on
+     * @param range - The range to filter with
+     */
+    rangeLte(column, range) {
+        this.url.searchParams.append(column, `nxr.${range}`);
+        return this;
+    }
+    /**
+     * Only relevant for range columns. Match only rows where `column` is
+     * mutually exclusive to `range` and there can be no element between the two
+     * ranges.
+     *
+     * @param column - The range column to filter on
+     * @param range - The range to filter with
+     */
+    rangeAdjacent(column, range) {
+        this.url.searchParams.append(column, `adj.${range}`);
+        return this;
+    }
+    /**
+     * Only relevant for array and range columns. Match only rows where
+     * `column` and `value` have an element in common.
+     *
+     * @param column - The array or range column to filter on
+     * @param value - The array or range value to filter with
+     */
+    overlaps(column, value) {
+        if (typeof value === 'string') {
+            // range
+            this.url.searchParams.append(column, `ov.${value}`);
+        }
+        else {
+            // array
+            this.url.searchParams.append(column, `ov.{${value.join(',')}}`);
+        }
+        return this;
+    }
+    /**
+     * Only relevant for text and tsvector columns. Match only rows where
+     * `column` matches the query string in `query`.
+     *
+     * @param column - The text or tsvector column to filter on
+     * @param query - The query text to match with
+     * @param options - Named parameters
+     * @param options.config - The text search configuration to use
+     * @param options.type - Change how the `query` text is interpreted
+     */
+    textSearch(column, query, { config, type } = {}) {
+        let typePart = '';
+        if (type === 'plain') {
+            typePart = 'pl';
+        }
+        else if (type === 'phrase') {
+            typePart = 'ph';
+        }
+        else if (type === 'websearch') {
+            typePart = 'w';
+        }
+        const configPart = config === undefined ? '' : `(${config})`;
+        this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);
+        return this;
+    }
+    /**
+     * Match only rows where each column in `query` keys is equal to its
+     * associated value. Shorthand for multiple `.eq()`s.
+     *
+     * @param query - The object to filter with, with column names as keys mapped
+     * to their filter values
+     */
+    match(query) {
+        Object.entries(query).forEach(([column, value]) => {
+            this.url.searchParams.append(column, `eq.${value}`);
+        });
+        return this;
+    }
+    /**
+     * Match only rows which doesn't satisfy the filter.
+     *
+     * Unlike most filters, `opearator` and `value` are used as-is and need to
+     * follow [PostgREST
+     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
+     * to make sure they are properly sanitized.
+     *
+     * @param column - The column to filter on
+     * @param operator - The operator to be negated to filter with, following
+     * PostgREST syntax
+     * @param value - The value to filter with, following PostgREST syntax
+     */
+    not(column, operator, value) {
+        this.url.searchParams.append(column, `not.${operator}.${value}`);
+        return this;
+    }
+    /**
+     * Match only rows which satisfy at least one of the filters.
+     *
+     * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST
+     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
+     * to make sure it's properly sanitized.
+     *
+     * It's currently not possible to do an `.or()` filter across multiple tables.
+     *
+     * @param filters - The filters to use, following PostgREST syntax
+     * @param options - Named parameters
+     * @param options.referencedTable - Set this to filter on referenced tables
+     * instead of the parent table
+     * @param options.foreignTable - Deprecated, use `referencedTable` instead
+     */
+    or(filters, { foreignTable, referencedTable = foreignTable, } = {}) {
+        const key = referencedTable ? `${referencedTable}.or` : 'or';
+        this.url.searchParams.append(key, `(${filters})`);
+        return this;
+    }
+    /**
+     * Match only rows which satisfy the filter. This is an escape hatch - you
+     * should use the specific filter methods wherever possible.
+     *
+     * Unlike most filters, `opearator` and `value` are used as-is and need to
+     * follow [PostgREST
+     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
+     * to make sure they are properly sanitized.
+     *
+     * @param column - The column to filter on
+     * @param operator - The operator to filter with, following PostgREST syntax
+     * @param value - The value to filter with, following PostgREST syntax
+     */
+    filter(column, operator, value) {
+        this.url.searchParams.append(column, `${operator}.${value}`);
+        return this;
+    }
+}
+//# sourceMappingURL=PostgrestFilterBuilder.js.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestFilterBuilder.js.map b/dist/esm/PostgrestFilterBuilder.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..c646516cff2678f4c7f5d2327c1eb9c53d2d7179
--- /dev/null
+++ b/dist/esm/PostgrestFilterBuilder.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestFilterBuilder.js","sourceRoot":"","sources":["../../src/PostgrestFilterBuilder.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestQueryBuilder.d.ts b/dist/esm/PostgrestQueryBuilder.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..88e04babb2b67c20b64664a608260eb579362ba8
--- /dev/null
+++ b/dist/esm/PostgrestQueryBuilder.d.ts
@@ -0,0 +1,117 @@
+import PostgrestFilterBuilder from './PostgrestFilterBuilder';
+import { GetResult } from './select-query-parser';
+import { Fetch, GenericSchema, GenericTable, GenericView } from './types';
+export default class PostgrestQueryBuilder<Schema extends GenericSchema, Relation extends GenericTable | GenericView, RelationName = unknown, Relationships = Relation extends {
+    Relationships: infer R;
+} ? R : unknown> {
+    url: URL;
+    headers: Record<string, string>;
+    schema?: string;
+    signal?: AbortSignal;
+    fetch?: Fetch;
+    constructor(url: URL, { headers, schema, fetch, }: {
+        headers?: Record<string, string>;
+        schema?: string;
+        fetch?: Fetch;
+    });
+    /**
+     * Perform a SELECT query on the table or view.
+     *
+     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`
+     *
+     * @param options - Named parameters
+     *
+     * @param options.head - When set to `true`, `data` will not be returned.
+     * Useful if you only need the count.
+     *
+     * @param options.count - Count algorithm to use to count rows in the table or view.
+     *
+     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
+     * hood.
+     *
+     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
+     * statistics under the hood.
+     *
+     * `"estimated"`: Uses exact count for low numbers and planned count for high
+     * numbers.
+     */
+    select<Query extends string = '*', ResultOne = GetResult<Schema, Relation['Row'], RelationName, Relationships, Query>>(columns?: Query, { head, count, }?: {
+        head?: boolean;
+        count?: 'exact' | 'planned' | 'estimated';
+    }): PostgrestFilterBuilder<Schema, Relation['Row'], ResultOne[], RelationName, Relationships>;
+    insert<Row extends Relation extends {
+        Insert: unknown;
+    } ? Relation['Insert'] : never>(values: Row, options?: {
+        count?: 'exact' | 'planned' | 'estimated';
+    }): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>;
+    insert<Row extends Relation extends {
+        Insert: unknown;
+    } ? Relation['Insert'] : never>(values: Row[], options?: {
+        count?: 'exact' | 'planned' | 'estimated';
+        defaultToNull?: boolean;
+    }): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>;
+    upsert<Row extends Relation extends {
+        Insert: unknown;
+    } ? Relation['Insert'] : never>(values: Row, options?: {
+        onConflict?: string;
+        ignoreDuplicates?: boolean;
+        count?: 'exact' | 'planned' | 'estimated';
+    }): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>;
+    upsert<Row extends Relation extends {
+        Insert: unknown;
+    } ? Relation['Insert'] : never>(values: Row[], options?: {
+        onConflict?: string;
+        ignoreDuplicates?: boolean;
+        count?: 'exact' | 'planned' | 'estimated';
+        defaultToNull?: boolean;
+    }): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>;
+    /**
+     * Perform an UPDATE on the table or view.
+     *
+     * By default, updated rows are not returned. To return it, chain the call
+     * with `.select()` after filters.
+     *
+     * @param values - The values to update with
+     *
+     * @param options - Named parameters
+     *
+     * @param options.count - Count algorithm to use to count updated rows.
+     *
+     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
+     * hood.
+     *
+     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
+     * statistics under the hood.
+     *
+     * `"estimated"`: Uses exact count for low numbers and planned count for high
+     * numbers.
+     */
+    update<Row extends Relation extends {
+        Update: unknown;
+    } ? Relation['Update'] : never>(values: Row, { count, }?: {
+        count?: 'exact' | 'planned' | 'estimated';
+    }): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>;
+    /**
+     * Perform a DELETE on the table or view.
+     *
+     * By default, deleted rows are not returned. To return it, chain the call
+     * with `.select()` after filters.
+     *
+     * @param options - Named parameters
+     *
+     * @param options.count - Count algorithm to use to count deleted rows.
+     *
+     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
+     * hood.
+     *
+     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
+     * statistics under the hood.
+     *
+     * `"estimated"`: Uses exact count for low numbers and planned count for high
+     * numbers.
+     */
+    delete({ count, }?: {
+        count?: 'exact' | 'planned' | 'estimated';
+    }): PostgrestFilterBuilder<Schema, Relation['Row'], null, RelationName, Relationships>;
+}
+//# sourceMappingURL=PostgrestQueryBuilder.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestQueryBuilder.d.ts.map b/dist/esm/PostgrestQueryBuilder.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..2a117fca9e759e13464b476ec7f9c6994ed41c3c
--- /dev/null
+++ b/dist/esm/PostgrestQueryBuilder.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestQueryBuilder.d.ts","sourceRoot":"","sources":["../../src/PostgrestQueryBuilder.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestQueryBuilder.js b/dist/esm/PostgrestQueryBuilder.js
new file mode 100644
index 0000000000000000000000000000000000000000..e3a000e895cf7d4233e6803009e0a4497b797c7e
--- /dev/null
+++ b/dist/esm/PostgrestQueryBuilder.js
@@ -0,0 +1,266 @@
+import PostgrestFilterBuilder from './PostgrestFilterBuilder';
+export default class PostgrestQueryBuilder {
+    constructor(url, { headers = {}, schema, fetch, }) {
+        this.url = url;
+        this.headers = headers;
+        this.schema = schema;
+        this.fetch = fetch;
+    }
+    /**
+     * Perform a SELECT query on the table or view.
+     *
+     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`
+     *
+     * @param options - Named parameters
+     *
+     * @param options.head - When set to `true`, `data` will not be returned.
+     * Useful if you only need the count.
+     *
+     * @param options.count - Count algorithm to use to count rows in the table or view.
+     *
+     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
+     * hood.
+     *
+     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
+     * statistics under the hood.
+     *
+     * `"estimated"`: Uses exact count for low numbers and planned count for high
+     * numbers.
+     */
+    select(columns, { head = false, count, } = {}) {
+        const method = head ? 'HEAD' : 'GET';
+        // Remove whitespaces except when quoted
+        let quoted = false;
+        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')
+            .split('')
+            .map((c) => {
+            if (/\s/.test(c) && !quoted) {
+                return '';
+            }
+            if (c === '"') {
+                quoted = !quoted;
+            }
+            return c;
+        })
+            .join('');
+        this.url.searchParams.set('select', cleanedColumns);
+        if (count) {
+            this.headers['Prefer'] = `count=${count}`;
+        }
+        return new PostgrestFilterBuilder({
+            method,
+            url: this.url,
+            headers: this.headers,
+            schema: this.schema,
+            fetch: this.fetch,
+            allowEmpty: false,
+        });
+    }
+    /**
+     * Perform an INSERT into the table or view.
+     *
+     * By default, inserted rows are not returned. To return it, chain the call
+     * with `.select()`.
+     *
+     * @param values - The values to insert. Pass an object to insert a single row
+     * or an array to insert multiple rows.
+     *
+     * @param options - Named parameters
+     *
+     * @param options.count - Count algorithm to use to count inserted rows.
+     *
+     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
+     * hood.
+     *
+     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
+     * statistics under the hood.
+     *
+     * `"estimated"`: Uses exact count for low numbers and planned count for high
+     * numbers.
+     *
+     * @param options.defaultToNull - Make missing fields default to `null`.
+     * Otherwise, use the default value for the column. Only applies for bulk
+     * inserts.
+     */
+    insert(values, { count, defaultToNull = true, } = {}) {
+        const method = 'POST';
+        const prefersHeaders = [];
+        if (this.headers['Prefer']) {
+            prefersHeaders.push(this.headers['Prefer']);
+        }
+        if (count) {
+            prefersHeaders.push(`count=${count}`);
+        }
+        if (!defaultToNull) {
+            prefersHeaders.push('missing=default');
+        }
+        this.headers['Prefer'] = prefersHeaders.join(',');
+        if (Array.isArray(values)) {
+            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);
+            if (columns.length > 0) {
+                const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
+                this.url.searchParams.set('columns', uniqueColumns.join(','));
+            }
+        }
+        return new PostgrestFilterBuilder({
+            method,
+            url: this.url,
+            headers: this.headers,
+            schema: this.schema,
+            body: values,
+            fetch: this.fetch,
+            allowEmpty: false,
+        });
+    }
+    /**
+     * Perform an UPSERT on the table or view. Depending on the column(s) passed
+     * to `onConflict`, `.upsert()` allows you to perform the equivalent of
+     * `.insert()` if a row with the corresponding `onConflict` columns doesn't
+     * exist, or if it does exist, perform an alternative action depending on
+     * `ignoreDuplicates`.
+     *
+     * By default, upserted rows are not returned. To return it, chain the call
+     * with `.select()`.
+     *
+     * @param values - The values to upsert with. Pass an object to upsert a
+     * single row or an array to upsert multiple rows.
+     *
+     * @param options - Named parameters
+     *
+     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how
+     * duplicate rows are determined. Two rows are duplicates if all the
+     * `onConflict` columns are equal.
+     *
+     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If
+     * `false`, duplicate rows are merged with existing rows.
+     *
+     * @param options.count - Count algorithm to use to count upserted rows.
+     *
+     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
+     * hood.
+     *
+     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
+     * statistics under the hood.
+     *
+     * `"estimated"`: Uses exact count for low numbers and planned count for high
+     * numbers.
+     *
+     * @param options.defaultToNull - Make missing fields default to `null`.
+     * Otherwise, use the default value for the column. This only applies when
+     * inserting new rows, not when merging with existing rows under
+     * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.
+     */
+    upsert(values, { onConflict, ignoreDuplicates = false, count, defaultToNull = true, } = {}) {
+        const method = 'POST';
+        const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`];
+        if (onConflict !== undefined)
+            this.url.searchParams.set('on_conflict', onConflict);
+        if (this.headers['Prefer']) {
+            prefersHeaders.push(this.headers['Prefer']);
+        }
+        if (count) {
+            prefersHeaders.push(`count=${count}`);
+        }
+        if (!defaultToNull) {
+            prefersHeaders.push('missing=default');
+        }
+        this.headers['Prefer'] = prefersHeaders.join(',');
+        if (Array.isArray(values)) {
+            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);
+            if (columns.length > 0) {
+                const uniqueColumns = [...new Set(columns)].map((column) => `"${column}"`);
+                this.url.searchParams.set('columns', uniqueColumns.join(','));
+            }
+        }
+        return new PostgrestFilterBuilder({
+            method,
+            url: this.url,
+            headers: this.headers,
+            schema: this.schema,
+            body: values,
+            fetch: this.fetch,
+            allowEmpty: false,
+        });
+    }
+    /**
+     * Perform an UPDATE on the table or view.
+     *
+     * By default, updated rows are not returned. To return it, chain the call
+     * with `.select()` after filters.
+     *
+     * @param values - The values to update with
+     *
+     * @param options - Named parameters
+     *
+     * @param options.count - Count algorithm to use to count updated rows.
+     *
+     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
+     * hood.
+     *
+     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
+     * statistics under the hood.
+     *
+     * `"estimated"`: Uses exact count for low numbers and planned count for high
+     * numbers.
+     */
+    update(values, { count, } = {}) {
+        const method = 'PATCH';
+        const prefersHeaders = [];
+        if (this.headers['Prefer']) {
+            prefersHeaders.push(this.headers['Prefer']);
+        }
+        if (count) {
+            prefersHeaders.push(`count=${count}`);
+        }
+        if (prefersHeaders.filter((s) => s).length > 0)
+            this.headers['Prefer'] = prefersHeaders.join(',');
+        return new PostgrestFilterBuilder({
+            method,
+            url: this.url,
+            headers: this.headers,
+            schema: this.schema,
+            body: values,
+            fetch: this.fetch,
+            allowEmpty: false,
+        });
+    }
+    /**
+     * Perform a DELETE on the table or view.
+     *
+     * By default, deleted rows are not returned. To return it, chain the call
+     * with `.select()` after filters.
+     *
+     * @param options - Named parameters
+     *
+     * @param options.count - Count algorithm to use to count deleted rows.
+     *
+     * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
+     * hood.
+     *
+     * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
+     * statistics under the hood.
+     *
+     * `"estimated"`: Uses exact count for low numbers and planned count for high
+     * numbers.
+     */
+    delete({ count, } = {}) {
+        const method = 'DELETE';
+        const prefersHeaders = [];
+        if (count) {
+            prefersHeaders.push(`count=${count}`);
+        }
+        if (this.headers['Prefer']) {
+            prefersHeaders.unshift(this.headers['Prefer']);
+        }
+        this.headers['Prefer'] = prefersHeaders.join(',');
+        return new PostgrestFilterBuilder({
+            method,
+            url: this.url,
+            headers: this.headers,
+            schema: this.schema,
+            fetch: this.fetch,
+            allowEmpty: false,
+        });
+    }
+}
+//# sourceMappingURL=PostgrestQueryBuilder.js.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestQueryBuilder.js.map b/dist/esm/PostgrestQueryBuilder.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..7b511e29ec02bea1559e963054467b441a578968
--- /dev/null
+++ b/dist/esm/PostgrestQueryBuilder.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestQueryBuilder.js","sourceRoot":"","sources":["../../src/PostgrestQueryBuilder.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestTransformBuilder.d.ts b/dist/esm/PostgrestTransformBuilder.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..090a88d7f6cb95e14af07e2a62314860f22336fd
--- /dev/null
+++ b/dist/esm/PostgrestTransformBuilder.d.ts
@@ -0,0 +1,148 @@
+import PostgrestBuilder from './PostgrestBuilder';
+import { GetResult } from './select-query-parser';
+import { GenericSchema } from './types';
+export default class PostgrestTransformBuilder<Schema extends GenericSchema, Row extends Record<string, unknown>, Result, RelationName = unknown, Relationships = unknown> extends PostgrestBuilder<Result> {
+    /**
+     * Perform a SELECT on the query result.
+     *
+     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not
+     * return modified rows. By calling this method, modified rows are returned in
+     * `data`.
+     *
+     * @param columns - The columns to retrieve, separated by commas
+     */
+    select<Query extends string = '*', NewResultOne = GetResult<Schema, Row, RelationName, Relationships, Query>>(columns?: Query): PostgrestTransformBuilder<Schema, Row, NewResultOne[], RelationName, Relationships>;
+    order<ColumnName extends string & keyof Row>(column: ColumnName, options?: {
+        ascending?: boolean;
+        nullsFirst?: boolean;
+        referencedTable?: undefined;
+    }): this;
+    order(column: string, options?: {
+        ascending?: boolean;
+        nullsFirst?: boolean;
+        referencedTable?: string;
+    }): this;
+    /**
+     * @deprecated Use `options.referencedTable` instead of `options.foreignTable`
+     */
+    order<ColumnName extends string & keyof Row>(column: ColumnName, options?: {
+        ascending?: boolean;
+        nullsFirst?: boolean;
+        foreignTable?: undefined;
+    }): this;
+    /**
+     * @deprecated Use `options.referencedTable` instead of `options.foreignTable`
+     */
+    order(column: string, options?: {
+        ascending?: boolean;
+        nullsFirst?: boolean;
+        foreignTable?: string;
+    }): this;
+    /**
+     * Limit the query result by `count`.
+     *
+     * @param count - The maximum number of rows to return
+     * @param options - Named parameters
+     * @param options.referencedTable - Set this to limit rows of referenced
+     * tables instead of the parent table
+     * @param options.foreignTable - Deprecated, use `options.referencedTable`
+     * instead
+     */
+    limit(count: number, { foreignTable, referencedTable, }?: {
+        foreignTable?: string;
+        referencedTable?: string;
+    }): this;
+    /**
+     * Limit the query result by starting at an offset `from` and ending at the offset `to`.
+     * Only records within this range are returned.
+     * This respects the query order and if there is no order clause the range could behave unexpectedly.
+     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third
+     * and fourth rows of the query.
+     *
+     * @param from - The starting index from which to limit the result
+     * @param to - The last index to which to limit the result
+     * @param options - Named parameters
+     * @param options.referencedTable - Set this to limit rows of referenced
+     * tables instead of the parent table
+     * @param options.foreignTable - Deprecated, use `options.referencedTable`
+     * instead
+     */
+    range(from: number, to: number, { foreignTable, referencedTable, }?: {
+        foreignTable?: string;
+        referencedTable?: string;
+    }): this;
+    /**
+     * Set the AbortSignal for the fetch request.
+     *
+     * @param signal - The AbortSignal to use for the fetch request
+     */
+    abortSignal(signal: AbortSignal): this;
+    /**
+     * Return `data` as a single object instead of an array of objects.
+     *
+     * Query result must be one row (e.g. using `.limit(1)`), otherwise this
+     * returns an error.
+     */
+    single<ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never>(): PostgrestBuilder<ResultOne>;
+    /**
+     * Return `data` as a single object instead of an array of objects.
+     *
+     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise
+     * this returns an error.
+     */
+    maybeSingle<ResultOne = Result extends (infer ResultOne)[] ? ResultOne : never>(): PostgrestBuilder<ResultOne | null>;
+    /**
+     * Return `data` as a string in CSV format.
+     */
+    csv(): PostgrestBuilder<string>;
+    /**
+     * Return `data` as an object in [GeoJSON](https://geojson.org) format.
+     */
+    geojson(): PostgrestBuilder<Record<string, unknown>>;
+    /**
+     * Return `data` as the EXPLAIN plan for the query.
+     *
+     * You need to enable the
+     * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)
+     * setting before using this method.
+     *
+     * @param options - Named parameters
+     *
+     * @param options.analyze - If `true`, the query will be executed and the
+     * actual run time will be returned
+     *
+     * @param options.verbose - If `true`, the query identifier will be returned
+     * and `data` will include the output columns of the query
+     *
+     * @param options.settings - If `true`, include information on configuration
+     * parameters that affect query planning
+     *
+     * @param options.buffers - If `true`, include information on buffer usage
+     *
+     * @param options.wal - If `true`, include information on WAL record generation
+     *
+     * @param options.format - The format of the output, can be `"text"` (default)
+     * or `"json"`
+     */
+    explain({ analyze, verbose, settings, buffers, wal, format, }?: {
+        analyze?: boolean;
+        verbose?: boolean;
+        settings?: boolean;
+        buffers?: boolean;
+        wal?: boolean;
+        format?: 'json' | 'text';
+    }): PostgrestBuilder<Record<string, unknown>[]> | PostgrestBuilder<string>;
+    /**
+     * Rollback the query.
+     *
+     * `data` will still be returned, but the query is not committed.
+     */
+    rollback(): this;
+    /**
+     * Override the type of the returned `data`.
+     *
+     * @typeParam NewResult - The new result type to override with
+     */
+    returns<NewResult>(): PostgrestTransformBuilder<Schema, Row, NewResult, RelationName, Relationships>;
+}
+//# sourceMappingURL=PostgrestTransformBuilder.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestTransformBuilder.d.ts.map b/dist/esm/PostgrestTransformBuilder.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..3eb82b495c48d310fdc52d905f0ead6aa51cff50
--- /dev/null
+++ b/dist/esm/PostgrestTransformBuilder.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestTransformBuilder.d.ts","sourceRoot":"","sources":["../../src/PostgrestTransformBuilder.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/PostgrestTransformBuilder.js b/dist/esm/PostgrestTransformBuilder.js
new file mode 100644
index 0000000000000000000000000000000000000000..2ea6bef8b5962a975ed9e581cbe36ed6fa60d66e
--- /dev/null
+++ b/dist/esm/PostgrestTransformBuilder.js
@@ -0,0 +1,215 @@
+import PostgrestBuilder from './PostgrestBuilder';
+export default class PostgrestTransformBuilder extends PostgrestBuilder {
+    /**
+     * Perform a SELECT on the query result.
+     *
+     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not
+     * return modified rows. By calling this method, modified rows are returned in
+     * `data`.
+     *
+     * @param columns - The columns to retrieve, separated by commas
+     */
+    select(columns) {
+        // Remove whitespaces except when quoted
+        let quoted = false;
+        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')
+            .split('')
+            .map((c) => {
+            if (/\s/.test(c) && !quoted) {
+                return '';
+            }
+            if (c === '"') {
+                quoted = !quoted;
+            }
+            return c;
+        })
+            .join('');
+        this.url.searchParams.set('select', cleanedColumns);
+        if (this.headers['Prefer']) {
+            this.headers['Prefer'] += ',';
+        }
+        this.headers['Prefer'] += 'return=representation';
+        return this;
+    }
+    /**
+     * Order the query result by `column`.
+     *
+     * You can call this method multiple times to order by multiple columns.
+     *
+     * You can order referenced tables, but it only affects the ordering of the
+     * parent table if you use `!inner` in the query.
+     *
+     * @param column - The column to order by
+     * @param options - Named parameters
+     * @param options.ascending - If `true`, the result will be in ascending order
+     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,
+     * `null`s appear last.
+     * @param options.referencedTable - Set this to order a referenced table by
+     * its columns
+     * @param options.foreignTable - Deprecated, use `options.referencedTable`
+     * instead
+     */
+    order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable, } = {}) {
+        const key = referencedTable ? `${referencedTable}.order` : 'order';
+        const existingOrder = this.url.searchParams.get(key);
+        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);
+        return this;
+    }
+    /**
+     * Limit the query result by `count`.
+     *
+     * @param count - The maximum number of rows to return
+     * @param options - Named parameters
+     * @param options.referencedTable - Set this to limit rows of referenced
+     * tables instead of the parent table
+     * @param options.foreignTable - Deprecated, use `options.referencedTable`
+     * instead
+     */
+    limit(count, { foreignTable, referencedTable = foreignTable, } = {}) {
+        const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;
+        this.url.searchParams.set(key, `${count}`);
+        return this;
+    }
+    /**
+     * Limit the query result by starting at an offset `from` and ending at the offset `to`.
+     * Only records within this range are returned.
+     * This respects the query order and if there is no order clause the range could behave unexpectedly.
+     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third
+     * and fourth rows of the query.
+     *
+     * @param from - The starting index from which to limit the result
+     * @param to - The last index to which to limit the result
+     * @param options - Named parameters
+     * @param options.referencedTable - Set this to limit rows of referenced
+     * tables instead of the parent table
+     * @param options.foreignTable - Deprecated, use `options.referencedTable`
+     * instead
+     */
+    range(from, to, { foreignTable, referencedTable = foreignTable, } = {}) {
+        const keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;
+        const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;
+        this.url.searchParams.set(keyOffset, `${from}`);
+        // Range is inclusive, so add 1
+        this.url.searchParams.set(keyLimit, `${to - from + 1}`);
+        return this;
+    }
+    /**
+     * Set the AbortSignal for the fetch request.
+     *
+     * @param signal - The AbortSignal to use for the fetch request
+     */
+    abortSignal(signal) {
+        this.signal = signal;
+        return this;
+    }
+    /**
+     * Return `data` as a single object instead of an array of objects.
+     *
+     * Query result must be one row (e.g. using `.limit(1)`), otherwise this
+     * returns an error.
+     */
+    single() {
+        this.headers['Accept'] = 'application/vnd.pgrst.object+json';
+        return this;
+    }
+    /**
+     * Return `data` as a single object instead of an array of objects.
+     *
+     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise
+     * this returns an error.
+     */
+    maybeSingle() {
+        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361
+        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`
+        if (this.method === 'GET') {
+            this.headers['Accept'] = 'application/json';
+        }
+        else {
+            this.headers['Accept'] = 'application/vnd.pgrst.object+json';
+        }
+        this.isMaybeSingle = true;
+        return this;
+    }
+    /**
+     * Return `data` as a string in CSV format.
+     */
+    csv() {
+        this.headers['Accept'] = 'text/csv';
+        return this;
+    }
+    /**
+     * Return `data` as an object in [GeoJSON](https://geojson.org) format.
+     */
+    geojson() {
+        this.headers['Accept'] = 'application/geo+json';
+        return this;
+    }
+    /**
+     * Return `data` as the EXPLAIN plan for the query.
+     *
+     * You need to enable the
+     * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)
+     * setting before using this method.
+     *
+     * @param options - Named parameters
+     *
+     * @param options.analyze - If `true`, the query will be executed and the
+     * actual run time will be returned
+     *
+     * @param options.verbose - If `true`, the query identifier will be returned
+     * and `data` will include the output columns of the query
+     *
+     * @param options.settings - If `true`, include information on configuration
+     * parameters that affect query planning
+     *
+     * @param options.buffers - If `true`, include information on buffer usage
+     *
+     * @param options.wal - If `true`, include information on WAL record generation
+     *
+     * @param options.format - The format of the output, can be `"text"` (default)
+     * or `"json"`
+     */
+    explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = 'text', } = {}) {
+        var _a;
+        const options = [
+            analyze ? 'analyze' : null,
+            verbose ? 'verbose' : null,
+            settings ? 'settings' : null,
+            buffers ? 'buffers' : null,
+            wal ? 'wal' : null,
+        ]
+            .filter(Boolean)
+            .join('|');
+        // An Accept header can carry multiple media types but postgrest-js always sends one
+        const forMediatype = (_a = this.headers['Accept']) !== null && _a !== void 0 ? _a : 'application/json';
+        this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for="${forMediatype}"; options=${options};`;
+        if (format === 'json')
+            return this;
+        else
+            return this;
+    }
+    /**
+     * Rollback the query.
+     *
+     * `data` will still be returned, but the query is not committed.
+     */
+    rollback() {
+        var _a;
+        if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {
+            this.headers['Prefer'] += ',tx=rollback';
+        }
+        else {
+            this.headers['Prefer'] = 'tx=rollback';
+        }
+        return this;
+    }
+    /**
+     * Override the type of the returned `data`.
+     *
+     * @typeParam NewResult - The new result type to override with
+     */
+    returns() {
+        return this;
+    }
+}
+//# sourceMappingURL=PostgrestTransformBuilder.js.map
\ No newline at end of file
diff --git a/dist/esm/PostgrestTransformBuilder.js.map b/dist/esm/PostgrestTransformBuilder.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..1936404895d63eb170ca778b4380529cf99e6a9e
--- /dev/null
+++ b/dist/esm/PostgrestTransformBuilder.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"PostgrestTransformBuilder.js","sourceRoot":"","sources":["../../src/PostgrestTransformBuilder.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/constants.d.ts b/dist/esm/constants.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..12eb5624177c314d2ba01263e1993d7cdaf83f7d
--- /dev/null
+++ b/dist/esm/constants.d.ts
@@ -0,0 +1,4 @@
+export declare const DEFAULT_HEADERS: {
+    'X-Client-Info': string;
+};
+//# sourceMappingURL=constants.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/constants.d.ts.map b/dist/esm/constants.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..68e5791aa8b84c857c87f2750b06e6e9665a177f
--- /dev/null
+++ b/dist/esm/constants.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"constants.d.ts","sourceRoot":"","sources":["../../src/constants.ts"],"names":[],"mappings":"AACA,eAAO,MAAM,eAAe;;CAAiD,CAAA"}
\ No newline at end of file
diff --git a/dist/esm/constants.js b/dist/esm/constants.js
new file mode 100644
index 0000000000000000000000000000000000000000..2dd1bb942623e8424d719eb372fe2b0d6544b630
--- /dev/null
+++ b/dist/esm/constants.js
@@ -0,0 +1,3 @@
+import { version } from './version';
+export const DEFAULT_HEADERS = { 'X-Client-Info': `postgrest-js/${version}` };
+//# sourceMappingURL=constants.js.map
\ No newline at end of file
diff --git a/dist/esm/constants.js.map b/dist/esm/constants.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..beb92b0d29255c52c4303b1d27009fcbc60cb2cb
--- /dev/null
+++ b/dist/esm/constants.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"constants.js","sourceRoot":"","sources":["../../src/constants.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AACnC,MAAM,CAAC,MAAM,eAAe,GAAG,EAAE,eAAe,EAAE,gBAAgB,OAAO,EAAE,EAAE,CAAA"}
\ No newline at end of file
diff --git a/dist/esm/functions.d.ts b/dist/esm/functions.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..8614d5dc427522eb06bc4d1e1203c81e2435488b
--- /dev/null
+++ b/dist/esm/functions.d.ts
@@ -0,0 +1,2 @@
+export declare function consURL(url: URL, searchParams: URLSearchParams): URL;
+//# sourceMappingURL=functions.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/functions.d.ts.map b/dist/esm/functions.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..60843fa79379eef1da7ea008c7133e57e163f79b
--- /dev/null
+++ b/dist/esm/functions.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"functions.d.ts","sourceRoot":"","sources":["../../src/functions.ts"],"names":[],"mappings":"AAAA,wBAAgB,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,YAAY,EAAE,eAAe,OAI9D"}
\ No newline at end of file
diff --git a/dist/esm/functions.js b/dist/esm/functions.js
new file mode 100644
index 0000000000000000000000000000000000000000..580b949ed9b16f9d7938e498415685ae75667a24
--- /dev/null
+++ b/dist/esm/functions.js
@@ -0,0 +1,6 @@
+export function consURL(url, searchParams) {
+    if (url.href.indexOf('?') > -1)
+        return new URL(`${url.href.slice(0, url.href.indexOf('?'))}?${searchParams.toString()}`);
+    return url;
+}
+//# sourceMappingURL=functions.js.map
\ No newline at end of file
diff --git a/dist/esm/functions.js.map b/dist/esm/functions.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..217fd4c43d8f833d9e92bb9b5cdc26945353a06d
--- /dev/null
+++ b/dist/esm/functions.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../src/functions.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,OAAO,CAAC,GAAQ,EAAE,YAA6B;IAC7D,IAAI,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC5B,OAAO,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;IAC1F,OAAO,GAAG,CAAA;AACZ,CAAC"}
\ No newline at end of file
diff --git a/dist/esm/index.d.ts b/dist/esm/index.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b89082311ebb3e735262b5631301141813a56209
--- /dev/null
+++ b/dist/esm/index.d.ts
@@ -0,0 +1,18 @@
+import PostgrestClient from './PostgrestClient';
+import PostgrestQueryBuilder from './PostgrestQueryBuilder';
+import PostgrestFilterBuilder from './PostgrestFilterBuilder';
+import PostgrestTransformBuilder from './PostgrestTransformBuilder';
+import PostgrestBuilder from './PostgrestBuilder';
+import PostgrestError from './PostgrestError';
+export { PostgrestClient, PostgrestQueryBuilder, PostgrestFilterBuilder, PostgrestTransformBuilder, PostgrestBuilder, PostgrestError, };
+declare const _default: {
+    PostgrestClient: typeof PostgrestClient;
+    PostgrestQueryBuilder: typeof PostgrestQueryBuilder;
+    PostgrestFilterBuilder: typeof PostgrestFilterBuilder;
+    PostgrestTransformBuilder: typeof PostgrestTransformBuilder;
+    PostgrestBuilder: typeof PostgrestBuilder;
+    PostgrestError: typeof PostgrestError;
+};
+export default _default;
+export type { PostgrestResponse, PostgrestResponseFailure, PostgrestResponseSuccess, PostgrestSingleResponse, PostgrestMaybeSingleResponse, } from './types';
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/index.d.ts.map b/dist/esm/index.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..4e28d2f8fe200a0b67a561dfe5f5423d2ee4a0fb
--- /dev/null
+++ b/dist/esm/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AACA,OAAO,eAAe,MAAM,mBAAmB,CAAA;AAC/C,OAAO,qBAAqB,MAAM,yBAAyB,CAAA;AAC3D,OAAO,sBAAsB,MAAM,0BAA0B,CAAA;AAC7D,OAAO,yBAAyB,MAAM,6BAA6B,CAAA;AACnE,OAAO,gBAAgB,MAAM,oBAAoB,CAAA;AACjD,OAAO,cAAc,MAAM,kBAAkB,CAAA;AAE7C,OAAO,EACL,eAAe,EACf,qBAAqB,EACrB,sBAAsB,EACtB,yBAAyB,EACzB,gBAAgB,EAChB,cAAc,GACf,CAAA;;;;;;;;;AACD,wBAOC;AACD,YAAY,EACV,iBAAiB,EACjB,wBAAwB,EACxB,wBAAwB,EACxB,uBAAuB,EACvB,4BAA4B,GAC7B,MAAM,SAAS,CAAA"}
\ No newline at end of file
diff --git a/dist/esm/index.js b/dist/esm/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..aafe9832b2ec38ee8b5bec65f268052288ef8a28
--- /dev/null
+++ b/dist/esm/index.js
@@ -0,0 +1,17 @@
+// Always update wrapper.mjs when updating this file.
+import PostgrestClient from './PostgrestClient';
+import PostgrestQueryBuilder from './PostgrestQueryBuilder';
+import PostgrestFilterBuilder from './PostgrestFilterBuilder';
+import PostgrestTransformBuilder from './PostgrestTransformBuilder';
+import PostgrestBuilder from './PostgrestBuilder';
+import PostgrestError from './PostgrestError';
+export { PostgrestClient, PostgrestQueryBuilder, PostgrestFilterBuilder, PostgrestTransformBuilder, PostgrestBuilder, PostgrestError, };
+export default {
+    PostgrestClient,
+    PostgrestQueryBuilder,
+    PostgrestFilterBuilder,
+    PostgrestTransformBuilder,
+    PostgrestBuilder,
+    PostgrestError,
+};
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/dist/esm/index.js.map b/dist/esm/index.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..617ae929bbf57afe19e0fd4a0c8abe4412c5c169
--- /dev/null
+++ b/dist/esm/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,OAAO,eAAe,MAAM,mBAAmB,CAAA;AAC/C,OAAO,qBAAqB,MAAM,yBAAyB,CAAA;AAC3D,OAAO,sBAAsB,MAAM,0BAA0B,CAAA;AAC7D,OAAO,yBAAyB,MAAM,6BAA6B,CAAA;AACnE,OAAO,gBAAgB,MAAM,oBAAoB,CAAA;AACjD,OAAO,cAAc,MAAM,kBAAkB,CAAA;AAE7C,OAAO,EACL,eAAe,EACf,qBAAqB,EACrB,sBAAsB,EACtB,yBAAyB,EACzB,gBAAgB,EAChB,cAAc,GACf,CAAA;AACD,eAAe;IACb,eAAe;IACf,qBAAqB;IACrB,sBAAsB;IACtB,yBAAyB;IACzB,gBAAgB;IAChB,cAAc;CACf,CAAA"}
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/parser.d.ts b/dist/esm/select-query-parser/parser.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..dad50067e583076ad0161a0e9ed5752001ca4658
--- /dev/null
+++ b/dist/esm/select-query-parser/parser.d.ts
@@ -0,0 +1,255 @@
+import { SimplifyDeep } from '../types';
+/**
+ * Parses a query.
+ * A query is a sequence of nodes, separated by `,`, ensuring that there is
+ * no remaining input after all nodes have been parsed.
+ *
+ * Returns an array of parsed nodes, or an error.
+ */
+export declare type ParseQuery<Query extends string> = string extends Query ? GenericStringError : ParseNodes<EatWhitespace<Query>> extends [infer Nodes, `${infer Remainder}`] ? Nodes extends Ast.Node[] ? EatWhitespace<Remainder> extends '' ? SimplifyDeep<Nodes> : ParserError<`Unexpected input: ${Remainder}`> : ParserError<'Invalid nodes array structure'> : ParseNodes<EatWhitespace<Query>>;
+/**
+ * Notes: all `Parse*` types assume that their input strings have their whitespace
+ * removed. They return tuples of ["Return Value", "Remainder of text"] or
+ * a `ParserError`.
+ */
+/**
+ * Parses a sequence of nodes, separated by `,`.
+ *
+ * Returns a tuple of ["Parsed fields", "Remainder of text"] or an error.
+ */
+declare type ParseNodes<Input extends string> = string extends Input ? GenericStringError : ParseNodesHelper<Input, []>;
+declare type ParseNodesHelper<Input extends string, Nodes extends Ast.Node[]> = ParseNode<Input> extends [
+    infer Node,
+    `${infer Remainder}`
+] ? Node extends Ast.Node ? EatWhitespace<Remainder> extends `,${infer Remainder}` ? ParseNodesHelper<EatWhitespace<Remainder>, [...Nodes, Node]> : [[...Nodes, Node], EatWhitespace<Remainder>] : ParserError<'Invalid node type in nodes helper'> : ParseNode<Input>;
+/**
+ * Parses a node.
+ * A node is one of the following:
+ * - `*`
+ * - a field, as defined above
+ * - a renamed field, `renamed_field:field`
+ * - a spread field, `...field`
+ */
+declare type ParseNode<Input extends string> = Input extends '' ? ParserError<'Empty string'> : Input extends `*${infer Remainder}` ? [Ast.StarNode, EatWhitespace<Remainder>] : Input extends `...${infer Remainder}` ? ParseField<EatWhitespace<Remainder>> extends [infer TargetField, `${infer Remainder}`] ? TargetField extends Ast.FieldNode ? [{
+    type: 'spread';
+    target: TargetField;
+}, EatWhitespace<Remainder>] : ParserError<'Invalid target field type in spread'> : ParserError<`Unable to parse spread resource at \`${Input}\``> : ParseIdentifier<Input> extends [infer NameOrAlias, `${infer Remainder}`] ? EatWhitespace<Remainder> extends `::${infer _}` ? ParseField<Input> : EatWhitespace<Remainder> extends `:${infer Remainder}` ? ParseField<EatWhitespace<Remainder>> extends [infer Field, `${infer Remainder}`] ? Field extends Ast.FieldNode ? [Omit<Field, 'alias'> & {
+    alias: NameOrAlias;
+}, EatWhitespace<Remainder>] : ParserError<'Invalid field type in alias parsing'> : ParserError<`Unable to parse renamed field at \`${Input}\``> : ParseField<Input> : ParserError<`Expected identifier at \`${Input}\``>;
+/**
+ * Parses a field without preceding alias.
+ * A field is one of the following:
+ * - a top-level `count` field: https://docs.postgrest.org/en/v12/references/api/aggregate_functions.html#the-case-of-count
+ * - a field with an embedded resource
+ *   - `field(nodes)`
+ *   - `field!hint(nodes)`
+ *   - `field!inner(nodes)`
+ *   - `field!left(nodes)`
+ *   - `field!hint!inner(nodes)`
+ *   - `field!hint!left(nodes)`
+ * - a field without an embedded resource (see {@link ParseNonEmbeddedResourceField})
+ */
+declare type ParseField<Input extends string> = Input extends '' ? ParserError<'Empty string'> : ParseIdentifier<Input> extends [infer Name, `${infer Remainder}`] ? Name extends 'count' ? ParseCountField<Input> : Remainder extends `!inner${infer Remainder}` ? ParseEmbeddedResource<EatWhitespace<Remainder>> extends [infer Children, `${infer Remainder}`] ? Children extends Ast.Node[] ? [
+    {
+        type: 'field';
+        name: Name;
+        innerJoin: true;
+        children: Children;
+    },
+    Remainder
+] : ParserError<'Invalid children array in inner join'> : CreateParserErrorIfRequired<ParseEmbeddedResource<EatWhitespace<Remainder>>, `Expected embedded resource after "!inner" at \`${Remainder}\``> : EatWhitespace<Remainder> extends `!left${infer Remainder}` ? ParseEmbeddedResource<EatWhitespace<Remainder>> extends [infer Children, `${infer Remainder}`] ? Children extends Ast.Node[] ? [
+    {
+        type: 'field';
+        name: Name;
+        children: Children;
+    },
+    EatWhitespace<Remainder>
+] : ParserError<'Invalid children array in left join'> : CreateParserErrorIfRequired<ParseEmbeddedResource<EatWhitespace<Remainder>>, `Expected embedded resource after "!left" at \`${EatWhitespace<Remainder>}\``> : EatWhitespace<Remainder> extends `!${infer Remainder}` ? ParseIdentifier<EatWhitespace<Remainder>> extends [infer Hint, `${infer Remainder}`] ? EatWhitespace<Remainder> extends `!inner${infer Remainder}` ? ParseEmbeddedResource<EatWhitespace<Remainder>> extends [
+    infer Children,
+    `${infer Remainder}`
+] ? Children extends Ast.Node[] ? [
+    {
+        type: 'field';
+        name: Name;
+        hint: Hint;
+        innerJoin: true;
+        children: Children;
+    },
+    EatWhitespace<Remainder>
+] : ParserError<'Invalid children array in hint inner join'> : ParseEmbeddedResource<EatWhitespace<Remainder>> : ParseEmbeddedResource<EatWhitespace<Remainder>> extends [
+    infer Children,
+    `${infer Remainder}`
+] ? Children extends Ast.Node[] ? [
+    {
+        type: 'field';
+        name: Name;
+        hint: Hint;
+        children: Children;
+    },
+    EatWhitespace<Remainder>
+] : ParserError<'Invalid children array in hint'> : ParseEmbeddedResource<EatWhitespace<Remainder>> : ParserError<`Expected identifier after "!" at \`${EatWhitespace<Remainder>}\``> : EatWhitespace<Remainder> extends `(${infer _}` ? ParseEmbeddedResource<EatWhitespace<Remainder>> extends [infer Children, `${infer Remainder}`] ? Children extends Ast.Node[] ? [
+    {
+        type: 'field';
+        name: Name;
+        children: Children;
+    },
+    EatWhitespace<Remainder>
+] : ParserError<'Invalid children array in field'> : ParseEmbeddedResource<EatWhitespace<Remainder>> : ParseNonEmbeddedResourceField<Input> : ParserError<`Expected identifier at \`${Input}\``>;
+declare type ParseCountField<Input extends string> = ParseIdentifier<Input> extends [
+    'count',
+    `${infer Remainder}`
+] ? (EatWhitespace<Remainder> extends `()${infer Remainder_}` ? EatWhitespace<Remainder_> : EatWhitespace<Remainder>) extends `${infer Remainder}` ? Remainder extends `::${infer _}` ? ParseFieldTypeCast<Remainder> extends [infer CastType, `${infer Remainder}`] ? [
+    {
+        type: 'field';
+        name: 'count';
+        aggregateFunction: 'count';
+        castType: CastType;
+    },
+    Remainder
+] : ParseFieldTypeCast<Remainder> : [{
+    type: 'field';
+    name: 'count';
+    aggregateFunction: 'count';
+}, Remainder] : never : ParserError<`Expected "count" at \`${Input}\``>;
+/**
+ * Parses an embedded resource, which is an opening `(`, followed by a sequence of
+ * 0 or more nodes separated by `,`, then a closing `)`.
+ *
+ * Returns a tuple of ["Parsed fields", "Remainder of text"], an error,
+ * or the original string input indicating that no opening `(` was found.
+ */
+declare type ParseEmbeddedResource<Input extends string> = Input extends `(${infer Remainder}` ? EatWhitespace<Remainder> extends `)${infer Remainder}` ? [[], EatWhitespace<Remainder>] : ParseNodes<EatWhitespace<Remainder>> extends [infer Nodes, `${infer Remainder}`] ? Nodes extends Ast.Node[] ? EatWhitespace<Remainder> extends `)${infer Remainder}` ? [Nodes, EatWhitespace<Remainder>] : ParserError<`Expected ")" at \`${EatWhitespace<Remainder>}\``> : ParserError<'Invalid nodes array in embedded resource'> : ParseNodes<EatWhitespace<Remainder>> : ParserError<`Expected "(" at \`${Input}\``>;
+/**
+ * Parses a field excluding embedded resources, without preceding field renaming.
+ * This is one of the following:
+ * - `field`
+ * - `field.aggregate()`
+ * - `field.aggregate()::type`
+ * - `field::type`
+ * - `field::type.aggregate()`
+ * - `field::type.aggregate()::type`
+ * - `field->json...`
+ * - `field->json.aggregate()`
+ * - `field->json.aggregate()::type`
+ * - `field->json::type`
+ * - `field->json::type.aggregate()`
+ * - `field->json::type.aggregate()::type`
+ */
+declare type ParseNonEmbeddedResourceField<Input extends string> = ParseIdentifier<Input> extends [
+    infer Name,
+    `${infer Remainder}`
+] ? (Remainder extends `->${infer _}` ? ParseJsonAccessor<Remainder> extends [
+    infer PropertyName,
+    infer PropertyType,
+    `${infer Remainder}`
+] ? [{
+    type: 'field';
+    name: Name;
+    alias: PropertyName;
+    castType: PropertyType;
+}, Remainder] : ParseJsonAccessor<Remainder> : [{
+    type: 'field';
+    name: Name;
+}, Remainder]) extends infer Parsed ? Parsed extends [infer Field, `${infer Remainder}`] ? (Remainder extends `::${infer _}` ? ParseFieldTypeCast<Remainder> extends [infer CastType, `${infer Remainder}`] ? [Omit<Field, 'castType'> & {
+    castType: CastType;
+}, Remainder] : ParseFieldTypeCast<Remainder> : [Field, Remainder]) extends infer Parsed ? Parsed extends [infer Field, `${infer Remainder}`] ? Remainder extends `.${infer _}` ? ParseFieldAggregation<Remainder> extends [
+    infer AggregateFunction,
+    `${infer Remainder}`
+] ? Remainder extends `::${infer _}` ? ParseFieldTypeCast<Remainder> extends [infer CastType, `${infer Remainder}`] ? [
+    Omit<Field, 'castType'> & {
+        aggregateFunction: AggregateFunction;
+        castType: CastType;
+    },
+    Remainder
+] : ParseFieldTypeCast<Remainder> : [Field & {
+    aggregateFunction: AggregateFunction;
+}, Remainder] : ParseFieldAggregation<Remainder> : [Field, Remainder] : Parsed : never : Parsed : never : ParserError<`Expected identifier at \`${Input}\``>;
+/**
+ * Parses a JSON property accessor of the shape `->a->b->c`. The last accessor in
+ * the series may convert to text by using the ->> operator instead of ->.
+ *
+ * Returns a tuple of ["Last property name", "Last property type", "Remainder of text"]
+ */
+declare type ParseJsonAccessor<Input extends string> = Input extends `->${infer Remainder}` ? Remainder extends `>${infer Remainder}` ? ParseIdentifier<Remainder> extends [infer Name, `${infer Remainder}`] ? [Name, 'text', EatWhitespace<Remainder>] : ParserError<'Expected property name after `->>`'> : ParseIdentifier<Remainder> extends [infer Name, `${infer Remainder}`] ? ParseJsonAccessor<Remainder> extends [
+    infer PropertyName,
+    infer PropertyType,
+    `${infer Remainder}`
+] ? [PropertyName, PropertyType, EatWhitespace<Remainder>] : [Name, 'json', EatWhitespace<Remainder>] : ParserError<'Expected property name after `->`'> : ParserError<'Expected ->'>;
+/**
+ * Parses a field typecast (`::type`), returning a tuple of ["Type", "Remainder of text"].
+ */
+declare type ParseFieldTypeCast<Input extends string> = EatWhitespace<Input> extends `::${infer Remainder}` ? ParseIdentifier<EatWhitespace<Remainder>> extends [`${infer CastType}`, `${infer Remainder}`] ? [CastType, EatWhitespace<Remainder>] : ParserError<`Invalid type for \`::\` operator at \`${Remainder}\``> : ParserError<'Expected ::'>;
+/**
+ * Parses a field aggregation (`.max()`), returning a tuple of ["Aggregate function", "Remainder of text"]
+ */
+declare type ParseFieldAggregation<Input extends string> = EatWhitespace<Input> extends `.${infer Remainder}` ? ParseIdentifier<EatWhitespace<Remainder>> extends [
+    `${infer FunctionName}`,
+    `${infer Remainder}`
+] ? FunctionName extends Token.AggregateFunction ? EatWhitespace<Remainder> extends `()${infer Remainder}` ? [FunctionName, EatWhitespace<Remainder>] : ParserError<`Expected \`()\` after \`.\` operator \`${FunctionName}\``> : ParserError<`Invalid type for \`.\` operator \`${FunctionName}\``> : ParserError<`Invalid type for \`.\` operator at \`${Remainder}\``> : ParserError<'Expected .'>;
+/**
+ * Parses a (possibly double-quoted) identifier.
+ * Identifiers are sequences of 1 or more letters.
+ */
+declare type ParseIdentifier<Input extends string> = ParseLetters<Input> extends [
+    infer Name,
+    `${infer Remainder}`
+] ? [Name, EatWhitespace<Remainder>] : ParseQuotedLetters<Input> extends [infer Name, `${infer Remainder}`] ? [Name, EatWhitespace<Remainder>] : ParserError<`No (possibly double-quoted) identifier at \`${Input}\``>;
+/**
+ * Parse a consecutive sequence of 1 or more letter, where letters are `[0-9a-zA-Z_]`.
+ */
+declare type ParseLetters<Input extends string> = string extends Input ? GenericStringError : ParseLettersHelper<Input, ''> extends [`${infer Letters}`, `${infer Remainder}`] ? Letters extends '' ? ParserError<`Expected letter at \`${Input}\``> : [Letters, Remainder] : ParseLettersHelper<Input, ''>;
+declare type ParseLettersHelper<Input extends string, Acc extends string> = string extends Input ? GenericStringError : Input extends `${infer L}${infer Remainder}` ? L extends Token.Letter ? ParseLettersHelper<Remainder, `${Acc}${L}`> : [Acc, Input] : [Acc, ''];
+/**
+ * Parse a consecutive sequence of 1 or more double-quoted letters,
+ * where letters are `[^"]`.
+ */
+declare type ParseQuotedLetters<Input extends string> = string extends Input ? GenericStringError : Input extends `"${infer Remainder}` ? ParseQuotedLettersHelper<Remainder, ''> extends [`${infer Letters}`, `${infer Remainder}`] ? Letters extends '' ? ParserError<`Expected string at \`${Remainder}\``> : [Letters, Remainder] : ParseQuotedLettersHelper<Remainder, ''> : ParserError<`Not a double-quoted string at \`${Input}\``>;
+declare type ParseQuotedLettersHelper<Input extends string, Acc extends string> = string extends Input ? GenericStringError : Input extends `${infer L}${infer Remainder}` ? L extends '"' ? [Acc, Remainder] : ParseQuotedLettersHelper<Remainder, `${Acc}${L}`> : ParserError<`Missing closing double-quote in \`"${Acc}${Input}\``>;
+/**
+ * Trims whitespace from the left of the input.
+ */
+declare type EatWhitespace<Input extends string> = string extends Input ? GenericStringError : Input extends `${Token.Whitespace}${infer Remainder}` ? EatWhitespace<Remainder> : Input;
+/**
+ * Creates a new {@link ParserError} if the given input is not already a parser error.
+ */
+declare type CreateParserErrorIfRequired<Input, Message extends string> = Input extends ParserError<string> ? Input : ParserError<Message>;
+/**
+ * Parser errors.
+ */
+export declare type ParserError<Message extends string> = {
+    error: true;
+} & Message;
+declare type GenericStringError = ParserError<'Received a generic string'>;
+export declare namespace Ast {
+    type Node = FieldNode | StarNode | SpreadNode;
+    type FieldNode = {
+        type: 'field';
+        name: string;
+        alias?: string;
+        hint?: string;
+        innerJoin?: true;
+        castType?: string;
+        aggregateFunction?: Token.AggregateFunction;
+        children?: Node[];
+    };
+    type StarNode = {
+        type: 'star';
+    };
+    type SpreadNode = {
+        type: 'spread';
+        target: FieldNode & {
+            children: Node[];
+        };
+    };
+}
+declare namespace Token {
+    export type Whitespace = ' ' | '\n' | '\t';
+    type LowerAlphabet = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z';
+    type Alphabet = LowerAlphabet | Uppercase<LowerAlphabet>;
+    type Digit = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0';
+    export type Letter = Alphabet | Digit | '_';
+    export type AggregateFunction = 'count' | 'sum' | 'avg' | 'min' | 'max';
+    export {};
+}
+export {};
+//# sourceMappingURL=parser.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/parser.d.ts.map b/dist/esm/select-query-parser/parser.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..75740d202bd03c778cf34c0613094f2b7f178148
--- /dev/null
+++ b/dist/esm/select-query-parser/parser.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"parser.d.ts","sourceRoot":"","sources":["../../../src/select-query-parser/parser.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/parser.js b/dist/esm/select-query-parser/parser.js
new file mode 100644
index 0000000000000000000000000000000000000000..71b03d44e578998aadaf0b4c289423c86de810b4
--- /dev/null
+++ b/dist/esm/select-query-parser/parser.js
@@ -0,0 +1,4 @@
+// Credits to @bnjmnt4n (https://www.npmjs.com/package/postgrest-query)
+// See https://github.com/PostgREST/postgrest/blob/2f91853cb1de18944a4556df09e52450b881cfb3/src/PostgREST/ApiRequest/QueryParams.hs#L282-L284
+export {};
+//# sourceMappingURL=parser.js.map
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/parser.js.map b/dist/esm/select-query-parser/parser.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..104ac68434d6ddb6b0d9e82f6c13a646a7d2c475
--- /dev/null
+++ b/dist/esm/select-query-parser/parser.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../src/select-query-parser/parser.ts"],"names":[],"mappings":"AAAA,uEAAuE;AACvE,6IAA6I"}
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/result.d.ts b/dist/esm/select-query-parser/result.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c407efffb57282095d4e8bc599cd3360640262e7
--- /dev/null
+++ b/dist/esm/select-query-parser/result.d.ts
@@ -0,0 +1,146 @@
+import { GenericTable } from '../types';
+import { ContainsNull, GenericRelationship, PostgreSQLTypes } from './types';
+import { Ast, ParseQuery } from './parser';
+import { AggregateFunctions, ExtractFirstProperty, GenericSchema, IsNonEmptyArray, Prettify, TablesAndViews, TypeScriptTypes } from './types';
+import { CheckDuplicateEmbededReference, GetFieldNodeResultName, IsAny, IsRelationNullable, ResolveRelationship, SelectQueryError } from './utils';
+/**
+ * Main entry point for constructing the result type of a PostgREST query.
+ *
+ * @param Schema - Database schema.
+ * @param Row - The type of a row in the current table.
+ * @param RelationName - The name of the current table or view.
+ * @param Relationships - Relationships of the current table.
+ * @param Query - The select query string literal to parse.
+ */
+export declare type GetResult<Schema extends GenericSchema, Row extends Record<string, unknown>, RelationName, Relationships, Query extends string> = IsAny<Schema> extends true ? ParseQuery<Query> extends infer ParsedQuery ? ParsedQuery extends Ast.Node[] ? RelationName extends string ? ProcessNodesWithoutSchema<ParsedQuery> : any : ParsedQuery : any : Relationships extends null ? ParseQuery<Query> extends infer ParsedQuery ? ParsedQuery extends Ast.Node[] ? RPCCallNodes<ParsedQuery, RelationName extends string ? RelationName : 'rpc_call', Row> : ParsedQuery : Row : ParseQuery<Query> extends infer ParsedQuery ? ParsedQuery extends Ast.Node[] ? RelationName extends string ? Relationships extends GenericRelationship[] ? ProcessNodes<Schema, Row, RelationName, Relationships, ParsedQuery> : SelectQueryError<'Invalid Relationships cannot infer result type'> : SelectQueryError<'Invalid RelationName cannot infer result type'> : ParsedQuery : never;
+declare type ProcessSimpleFieldWithoutSchema<Field extends Ast.FieldNode> = Field['aggregateFunction'] extends AggregateFunctions ? {
+    [K in GetFieldNodeResultName<Field>]: Field['castType'] extends PostgreSQLTypes ? TypeScriptTypes<Field['castType']> : number;
+} : {
+    [K in GetFieldNodeResultName<Field>]: Field['castType'] extends PostgreSQLTypes ? TypeScriptTypes<Field['castType']> : any;
+};
+declare type ProcessFieldNodeWithoutSchema<Node extends Ast.FieldNode> = IsNonEmptyArray<Node['children']> extends true ? {
+    [K in GetFieldNodeResultName<Node>]: Node['children'] extends Ast.Node[] ? ProcessNodesWithoutSchema<Node['children']>[] : ProcessSimpleFieldWithoutSchema<Node>;
+} : ProcessSimpleFieldWithoutSchema<Node>;
+/**
+ * Processes a single Node without schema and returns the resulting TypeScript type.
+ */
+declare type ProcessNodeWithoutSchema<Node extends Ast.Node> = Node extends Ast.StarNode ? any : Node extends Ast.SpreadNode ? Node['target']['children'] extends Ast.StarNode[] ? any : Node['target']['children'] extends Ast.FieldNode[] ? {
+    [P in Node['target']['children'][number] as GetFieldNodeResultName<P>]: P['castType'] extends PostgreSQLTypes ? TypeScriptTypes<P['castType']> : any;
+} : any : Node extends Ast.FieldNode ? ProcessFieldNodeWithoutSchema<Node> : any;
+/**
+ * Processes nodes when Schema is any, providing basic type inference
+ */
+declare type ProcessNodesWithoutSchema<Nodes extends Ast.Node[], Acc extends Record<string, unknown> = {}> = Nodes extends [infer FirstNode, ...infer RestNodes] ? FirstNode extends Ast.Node ? RestNodes extends Ast.Node[] ? ProcessNodeWithoutSchema<FirstNode> extends infer FieldResult ? FieldResult extends Record<string, unknown> ? ProcessNodesWithoutSchema<RestNodes, Acc & FieldResult> : FieldResult : any : any : any : Prettify<Acc>;
+/**
+ * Processes a single Node from a select chained after a rpc call
+ *
+ * @param Row - The type of a row in the current table.
+ * @param RelationName - The name of the current rpc function
+ * @param NodeType - The Node to process.
+ */
+export declare type ProcessRPCNode<Row extends Record<string, unknown>, RelationName extends string, NodeType extends Ast.Node> = NodeType['type'] extends Ast.StarNode['type'] ? Row : NodeType['type'] extends Ast.FieldNode['type'] ? ProcessSimpleField<Row, RelationName, Extract<NodeType, Ast.FieldNode>> : SelectQueryError<'RPC Unsupported node type.'>;
+/**
+ * Process select call that can be chained after an rpc call
+ */
+export declare type RPCCallNodes<Nodes extends Ast.Node[], RelationName extends string, Row extends Record<string, unknown>, Acc extends Record<string, unknown> = {}> = Nodes extends [infer FirstNode, ...infer RestNodes] ? FirstNode extends Ast.Node ? RestNodes extends Ast.Node[] ? ProcessRPCNode<Row, RelationName, FirstNode> extends infer FieldResult ? FieldResult extends Record<string, unknown> ? RPCCallNodes<RestNodes, RelationName, Row, Acc & FieldResult> : FieldResult extends SelectQueryError<infer E> ? SelectQueryError<E> : SelectQueryError<'Could not retrieve a valid record or error value'> : SelectQueryError<'Processing node failed.'> : SelectQueryError<'Invalid rest nodes array in RPC call'> : SelectQueryError<'Invalid first node in RPC call'> : Prettify<Acc>;
+/**
+ * Recursively processes an array of Nodes and accumulates the resulting TypeScript type.
+ *
+ * @param Schema - Database schema.
+ * @param Row - The type of a row in the current table.
+ * @param RelationName - The name of the current table or view.
+ * @param Relationships - Relationships of the current table.
+ * @param Nodes - An array of AST nodes to process.
+ * @param Acc - Accumulator for the constructed type.
+ */
+export declare type ProcessNodes<Schema extends GenericSchema, Row extends Record<string, unknown>, RelationName extends string, Relationships extends GenericRelationship[], Nodes extends Ast.Node[], Acc extends Record<string, unknown> = {}> = CheckDuplicateEmbededReference<Schema, RelationName, Relationships, Nodes> extends false ? Nodes extends [infer FirstNode, ...infer RestNodes] ? FirstNode extends Ast.Node ? RestNodes extends Ast.Node[] ? ProcessNode<Schema, Row, RelationName, Relationships, FirstNode> extends infer FieldResult ? FieldResult extends Record<string, unknown> ? ProcessNodes<Schema, Row, RelationName, Relationships, RestNodes, Acc & FieldResult> : FieldResult extends SelectQueryError<infer E> ? SelectQueryError<E> : SelectQueryError<'Could not retrieve a valid record or error value'> : SelectQueryError<'Processing node failed.'> : SelectQueryError<'Invalid rest nodes array type in ProcessNodes'> : SelectQueryError<'Invalid first node type in ProcessNodes'> : Prettify<Acc> : Prettify<CheckDuplicateEmbededReference<Schema, RelationName, Relationships, Nodes>>;
+/**
+ * Processes a single Node and returns the resulting TypeScript type.
+ *
+ * @param Schema - Database schema.
+ * @param Row - The type of a row in the current table.
+ * @param RelationName - The name of the current table or view.
+ * @param Relationships - Relationships of the current table.
+ * @param NodeType - The Node to process.
+ */
+export declare type ProcessNode<Schema extends GenericSchema, Row extends Record<string, unknown>, RelationName extends string, Relationships extends GenericRelationship[], NodeType extends Ast.Node> = NodeType['type'] extends Ast.StarNode['type'] ? Row : NodeType['type'] extends Ast.SpreadNode['type'] ? ProcessSpreadNode<Schema, Row, RelationName, Relationships, Extract<NodeType, Ast.SpreadNode>> : NodeType['type'] extends Ast.FieldNode['type'] ? ProcessFieldNode<Schema, Row, RelationName, Relationships, Extract<NodeType, Ast.FieldNode>> : SelectQueryError<'Unsupported node type.'>;
+/**
+ * Processes a FieldNode and returns the resulting TypeScript type.
+ *
+ * @param Schema - Database schema.
+ * @param Row - The type of a row in the current table.
+ * @param RelationName - The name of the current table or view.
+ * @param Relationships - Relationships of the current table.
+ * @param Field - The FieldNode to process.
+ */
+declare type ProcessFieldNode<Schema extends GenericSchema, Row extends Record<string, unknown>, RelationName extends string, Relationships extends GenericRelationship[], Field extends Ast.FieldNode> = Field['children'] extends [] ? {} : IsNonEmptyArray<Field['children']> extends true ? ProcessEmbeddedResource<Schema, Relationships, Field, RelationName> : ProcessSimpleField<Row, RelationName, Field>;
+/**
+ * Processes a simple field (without embedded resources).
+ *
+ * @param Row - The type of a row in the current table.
+ * @param RelationName - The name of the current table or view.
+ * @param Field - The FieldNode to process.
+ */
+declare type ProcessSimpleField<Row extends Record<string, unknown>, RelationName extends string, Field extends Ast.FieldNode> = Field['name'] extends keyof Row | 'count' ? Field['aggregateFunction'] extends AggregateFunctions ? {
+    [K in GetFieldNodeResultName<Field>]: Field['castType'] extends PostgreSQLTypes ? TypeScriptTypes<Field['castType']> : number;
+} : {
+    [K in GetFieldNodeResultName<Field>]: Field['castType'] extends PostgreSQLTypes ? TypeScriptTypes<Field['castType']> : Row[Field['name']];
+} : SelectQueryError<`column '${Field['name']}' does not exist on '${RelationName}'.`>;
+/**
+ * Processes an embedded resource (relation).
+ *
+ * @param Schema - Database schema.
+ * @param Row - The type of a row in the current table.
+ * @param RelationName - The name of the current table or view.
+ * @param Relationships - Relationships of the current table.
+ * @param Field - The FieldNode to process.
+ */
+export declare type ProcessEmbeddedResource<Schema extends GenericSchema, Relationships extends GenericRelationship[], Field extends Ast.FieldNode, CurrentTableOrView extends keyof TablesAndViews<Schema> & string> = ResolveRelationship<Schema, Relationships, Field, CurrentTableOrView> extends infer Resolved ? Resolved extends {
+    referencedTable: Pick<GenericTable, 'Row' | 'Relationships'>;
+    relation: GenericRelationship & {
+        match: 'refrel' | 'col' | 'fkname';
+    };
+    direction: string;
+} ? ProcessEmbeddedResourceResult<Schema, Resolved, Field, CurrentTableOrView> : {
+    [K in GetFieldNodeResultName<Field>]: Resolved;
+} : {
+    [K in GetFieldNodeResultName<Field>]: SelectQueryError<'Failed to resolve relationship.'> & string;
+};
+/**
+ * Helper type to process the result of an embedded resource.
+ */
+declare type ProcessEmbeddedResourceResult<Schema extends GenericSchema, Resolved extends {
+    referencedTable: Pick<GenericTable, 'Row' | 'Relationships'>;
+    relation: GenericRelationship & {
+        match: 'refrel' | 'col' | 'fkname';
+    };
+    direction: string;
+}, Field extends Ast.FieldNode, CurrentTableOrView extends keyof TablesAndViews<Schema>> = ProcessNodes<Schema, Resolved['referencedTable']['Row'], Field['name'], Resolved['referencedTable']['Relationships'], Field['children'] extends undefined ? [] : Exclude<Field['children'], undefined> extends Ast.Node[] ? Exclude<Field['children'], undefined> : []> extends infer ProcessedChildren ? {
+    [K in GetFieldNodeResultName<Field>]: Resolved['direction'] extends 'forward' ? Field extends {
+        innerJoin: true;
+    } ? Resolved['relation']['isOneToOne'] extends true ? ProcessedChildren : ProcessedChildren[] : Resolved['relation']['isOneToOne'] extends true ? ProcessedChildren | null : ProcessedChildren[] : Resolved['relation']['referencedRelation'] extends CurrentTableOrView ? Resolved['relation']['match'] extends 'col' ? IsRelationNullable<TablesAndViews<Schema>[CurrentTableOrView], Resolved['relation']> extends true ? ProcessedChildren | null : ProcessedChildren : ProcessedChildren[] : IsRelationNullable<TablesAndViews<Schema>[CurrentTableOrView], Resolved['relation']> extends true ? ProcessedChildren | null : ProcessedChildren;
+} : {
+    [K in GetFieldNodeResultName<Field>]: SelectQueryError<'Failed to process embedded resource nodes.'> & string;
+};
+/**
+ * Processes a SpreadNode by processing its target node.
+ *
+ * @param Schema - Database schema.
+ * @param Row - The type of a row in the current table.
+ * @param RelationName - The name of the current table or view.
+ * @param Relationships - Relationships of the current table.
+ * @param Spread - The SpreadNode to process.
+ */
+declare type ProcessSpreadNode<Schema extends GenericSchema, Row extends Record<string, unknown>, RelationName extends string, Relationships extends GenericRelationship[], Spread extends Ast.SpreadNode> = ProcessNode<Schema, Row, RelationName, Relationships, Spread['target']> extends infer Result ? Result extends SelectQueryError<infer E> ? SelectQueryError<E> : ExtractFirstProperty<Result> extends unknown[] ? {
+    [K in Spread['target']['name']]: SelectQueryError<`"${RelationName}" and "${Spread['target']['name']}" do not form a many-to-one or one-to-one relationship spread not possible`>;
+} : ProcessSpreadNodeResult<Result> : never;
+/**
+ * Helper type to process the result of a spread node.
+ */
+declare type ProcessSpreadNodeResult<Result> = Result extends Record<string, SelectQueryError<string> | null> ? Result : ExtractFirstProperty<Result> extends infer SpreadedObject ? ContainsNull<SpreadedObject> extends true ? Exclude<{
+    [K in keyof SpreadedObject]: SpreadedObject[K] | null;
+}, null> : Exclude<{
+    [K in keyof SpreadedObject]: SpreadedObject[K];
+}, null> : SelectQueryError<'An error occurred spreading the object'>;
+export {};
+//# sourceMappingURL=result.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/result.d.ts.map b/dist/esm/select-query-parser/result.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..7398725bc1e360a82812b9f7e156a022031b60c1
--- /dev/null
+++ b/dist/esm/select-query-parser/result.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"result.d.ts","sourceRoot":"","sources":["../../../src/select-query-parser/result.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/result.js b/dist/esm/select-query-parser/result.js
new file mode 100644
index 0000000000000000000000000000000000000000..77a7051b6071c0ae8a17a3e9b070bac9b24705f5
--- /dev/null
+++ b/dist/esm/select-query-parser/result.js
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=result.js.map
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/result.js.map b/dist/esm/select-query-parser/result.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..12c975ef92d47af000ab5b7fdda84ebcd767e311
--- /dev/null
+++ b/dist/esm/select-query-parser/result.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"result.js","sourceRoot":"","sources":["../../../src/select-query-parser/result.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/types.d.ts b/dist/esm/select-query-parser/types.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..6b53f39579a81d4afef48193480867b40b62fba1
--- /dev/null
+++ b/dist/esm/select-query-parser/types.d.ts
@@ -0,0 +1,31 @@
+import type { GenericRelationship, GenericSchema, GenericTable, Prettify } from '../types';
+export type { GenericRelationship, GenericSchema, GenericTable, Prettify };
+export declare type AggregateWithoutColumnFunctions = 'count';
+export declare type AggregateWithColumnFunctions = 'sum' | 'avg' | 'min' | 'max' | AggregateWithoutColumnFunctions;
+export declare type AggregateFunctions = AggregateWithColumnFunctions;
+export declare type Json = string | number | boolean | null | {
+    [key: string]: Json | undefined;
+} | Json[];
+declare type PostgresSQLNumberTypes = 'int2' | 'int4' | 'int8' | 'float4' | 'float8' | 'numeric';
+declare type PostgresSQLStringTypes = 'bytea' | 'bpchar' | 'varchar' | 'date' | 'text' | 'citext' | 'time' | 'timetz' | 'timestamp' | 'timestamptz' | 'uuid' | 'vector';
+declare type SingleValuePostgreSQLTypes = PostgresSQLNumberTypes | PostgresSQLStringTypes | 'bool' | 'json' | 'jsonb' | 'void' | 'record' | string;
+declare type ArrayPostgreSQLTypes = `_${SingleValuePostgreSQLTypes}`;
+declare type TypeScriptSingleValueTypes<T extends SingleValuePostgreSQLTypes> = T extends 'bool' ? boolean : T extends PostgresSQLNumberTypes ? number : T extends PostgresSQLStringTypes ? string : T extends 'json' | 'jsonb' ? Json : T extends 'void' ? undefined : T extends 'record' ? Record<string, unknown> : unknown;
+declare type StripUnderscore<T extends string> = T extends `_${infer U}` ? U : T;
+export declare type PostgreSQLTypes = SingleValuePostgreSQLTypes | ArrayPostgreSQLTypes;
+export declare type TypeScriptTypes<T extends PostgreSQLTypes> = T extends ArrayPostgreSQLTypes ? TypeScriptSingleValueTypes<StripUnderscore<Extract<T, SingleValuePostgreSQLTypes>>>[] : TypeScriptSingleValueTypes<T>;
+export declare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
+export declare type LastOf<T> = UnionToIntersection<T extends any ? () => T : never> extends () => infer R ? R : never;
+export declare type Push<T extends any[], V> = [...T, V];
+export declare type UnionToTuple<T, L = LastOf<T>, N = [T] extends [never] ? true : false> = N extends true ? [] : Push<UnionToTuple<Exclude<T, L>>, L>;
+export declare type UnionToArray<T> = UnionToTuple<T>;
+export declare type ExtractFirstProperty<T> = T extends {
+    [K in keyof T]: infer U;
+} ? U : never;
+export declare type ContainsNull<T> = null extends T ? true : false;
+export declare type IsNonEmptyArray<T> = Exclude<T, undefined> extends readonly [unknown, ...unknown[]] ? true : false;
+export declare type TablesAndViews<Schema extends GenericSchema> = Schema['Tables'] & Exclude<Schema['Views'], ''>;
+export declare type GetTableRelationships<Schema extends GenericSchema, Tname extends string> = TablesAndViews<Schema>[Tname] extends {
+    Relationships: infer R;
+} ? R : false;
+//# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/types.d.ts.map b/dist/esm/select-query-parser/types.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..fedf4ef7bd5c5de84ceace14f41b398d27d5e65a
--- /dev/null
+++ b/dist/esm/select-query-parser/types.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../../../src/select-query-parser/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/types.js b/dist/esm/select-query-parser/types.js
new file mode 100644
index 0000000000000000000000000000000000000000..718fd38ae40c67ea23b242517cf9919f602c5a3e
--- /dev/null
+++ b/dist/esm/select-query-parser/types.js
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/types.js.map b/dist/esm/select-query-parser/types.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..03c329961ebf8e2ea175d3071b366ebac7c1d289
--- /dev/null
+++ b/dist/esm/select-query-parser/types.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/select-query-parser/types.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/utils.d.ts b/dist/esm/select-query-parser/utils.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..ee4a056aa32d176da8ff4652928d6cb4605732a2
--- /dev/null
+++ b/dist/esm/select-query-parser/utils.d.ts
@@ -0,0 +1,252 @@
+import { Ast } from './parser';
+import { AggregateFunctions, ContainsNull, GenericRelationship, GenericSchema, GenericTable, IsNonEmptyArray, TablesAndViews, UnionToArray } from './types';
+export declare type IsAny<T> = 0 extends 1 & T ? true : false;
+export declare type SelectQueryError<Message extends string> = {
+    error: true;
+} & Message;
+export declare type DeduplicateRelationships<T extends readonly unknown[]> = T extends readonly [
+    infer First,
+    ...infer Rest
+] ? First extends Rest[number] ? DeduplicateRelationships<Rest extends readonly unknown[] ? Rest : []> : [First, ...DeduplicateRelationships<Rest extends readonly unknown[] ? Rest : []>] : T;
+export declare type GetFieldNodeResultName<Field extends Ast.FieldNode> = Field['alias'] extends string ? Field['alias'] : Field['aggregateFunction'] extends AggregateFunctions ? Field['aggregateFunction'] : Field['name'];
+declare type FilterRelationNodes<Nodes extends Ast.Node[]> = UnionToArray<{
+    [K in keyof Nodes]: Nodes[K] extends Ast.SpreadNode ? Nodes[K]['target'] : Nodes[K] extends Ast.FieldNode ? IsNonEmptyArray<Nodes[K]['children']> extends true ? Nodes[K] : never : never;
+}[number]>;
+declare type ResolveRelationships<Schema extends GenericSchema, RelationName extends string, Relationships extends GenericRelationship[], Nodes extends Ast.FieldNode[]> = UnionToArray<{
+    [K in keyof Nodes]: Nodes[K] extends Ast.FieldNode ? ResolveRelationship<Schema, Relationships, Nodes[K], RelationName> extends infer Relation ? Relation extends {
+        relation: {
+            referencedRelation: string;
+            foreignKeyName: string;
+            match: string;
+        };
+        from: string;
+    } ? {
+        referencedTable: Relation['relation']['referencedRelation'];
+        fkName: Relation['relation']['foreignKeyName'];
+        from: Relation['from'];
+        match: Relation['relation']['match'];
+        fieldName: GetFieldNodeResultName<Nodes[K]>;
+    } : Relation : never : never;
+}>[0];
+/**
+ * Checks if a relation is implicitly referenced twice, requiring disambiguation
+ */
+declare type IsDoubleReference<T, U> = T extends {
+    referencedTable: infer RT;
+    fieldName: infer FN;
+    match: infer M;
+} ? M extends 'col' | 'refrel' ? U extends {
+    referencedTable: RT;
+    fieldName: FN;
+    match: M;
+} ? true : false : false : false;
+/**
+ * Compares one element with all other elements in the array to find duplicates
+ */
+declare type CheckDuplicates<Arr extends any[], Current> = Arr extends [infer Head, ...infer Tail] ? IsDoubleReference<Current, Head> extends true ? Head | CheckDuplicates<Tail, Current> : CheckDuplicates<Tail, Current> : never;
+/**
+ * Iterates over the elements of the array to find duplicates
+ */
+declare type FindDuplicatesWithinDeduplicated<Arr extends any[]> = Arr extends [infer Head, ...infer Tail] ? CheckDuplicates<Tail, Head> | FindDuplicatesWithinDeduplicated<Tail> : never;
+declare type FindDuplicates<Arr extends any[]> = FindDuplicatesWithinDeduplicated<DeduplicateRelationships<Arr>>;
+export declare type CheckDuplicateEmbededReference<Schema extends GenericSchema, RelationName extends string, Relationships extends GenericRelationship[], Nodes extends Ast.Node[]> = FilterRelationNodes<Nodes> extends infer RelationsNodes ? RelationsNodes extends Ast.FieldNode[] ? ResolveRelationships<Schema, RelationName, Relationships, RelationsNodes> extends infer ResolvedRels ? ResolvedRels extends unknown[] ? FindDuplicates<ResolvedRels> extends infer Duplicates ? Duplicates extends never ? false : Duplicates extends {
+    fieldName: infer FieldName;
+} ? FieldName extends string ? {
+    [K in FieldName]: SelectQueryError<`table "${RelationName}" specified more than once use hinting for desambiguation`>;
+} : false : false : false : false : false : false : false;
+/**
+ * Returns a boolean representing whether there is a foreign key referencing
+ * a given relation.
+ */
+declare type HasFKeyToFRel<FRelName, Relationships> = Relationships extends [infer R] ? R extends {
+    referencedRelation: FRelName;
+} ? true : false : Relationships extends [infer R, ...infer Rest] ? HasFKeyToFRel<FRelName, [R]> extends true ? true : HasFKeyToFRel<FRelName, Rest> : false;
+/**
+ * Checks if there is more than one relation to a given foreign relation name in the Relationships.
+ */
+declare type HasMultipleFKeysToFRelDeduplicated<FRelName, Relationships> = Relationships extends [
+    infer R,
+    ...infer Rest
+] ? R extends {
+    referencedRelation: FRelName;
+} ? HasFKeyToFRel<FRelName, Rest> extends true ? true : HasMultipleFKeysToFRelDeduplicated<FRelName, Rest> : HasMultipleFKeysToFRelDeduplicated<FRelName, Rest> : false;
+declare type HasMultipleFKeysToFRel<FRelName, Relationships extends unknown[]> = HasMultipleFKeysToFRelDeduplicated<FRelName, DeduplicateRelationships<Relationships>>;
+declare type CheckRelationshipError<Schema extends GenericSchema, Relationships extends GenericRelationship[], CurrentTableOrView extends keyof TablesAndViews<Schema> & string, FoundRelation> = FoundRelation extends SelectQueryError<string> ? FoundRelation : FoundRelation extends {
+    relation: {
+        referencedRelation: infer RelatedRelationName;
+        name: string;
+    };
+    direction: 'reverse';
+} ? RelatedRelationName extends string ? HasMultipleFKeysToFRel<RelatedRelationName, Relationships> extends true ? SelectQueryError<`Could not embed because more than one relationship was found for '${RelatedRelationName}' and '${CurrentTableOrView}' you need to hint the column with ${RelatedRelationName}!<columnName> ?`> : FoundRelation : never : FoundRelation extends {
+    relation: {
+        referencedRelation: infer RelatedRelationName;
+        name: string;
+    };
+    direction: 'forward';
+    from: infer From;
+} ? RelatedRelationName extends string ? From extends keyof TablesAndViews<Schema> & string ? HasMultipleFKeysToFRel<RelatedRelationName, TablesAndViews<Schema>[From]['Relationships']> extends true ? SelectQueryError<`Could not embed because more than one relationship was found for '${From}' and '${RelatedRelationName}' you need to hint the column with ${From}!<columnName> ?`> : FoundRelation : never : never : FoundRelation;
+/**
+ * Resolves relationships for embedded resources and retrieves the referenced Table
+ */
+export declare type ResolveRelationship<Schema extends GenericSchema, Relationships extends GenericRelationship[], Field extends Ast.FieldNode, CurrentTableOrView extends keyof TablesAndViews<Schema> & string> = ResolveReverseRelationship<Schema, Relationships, Field, CurrentTableOrView> extends infer ReverseRelationship ? ReverseRelationship extends false ? CheckRelationshipError<Schema, Relationships, CurrentTableOrView, ResolveForwardRelationship<Schema, Field, CurrentTableOrView>> : CheckRelationshipError<Schema, Relationships, CurrentTableOrView, ReverseRelationship> : never;
+/**
+ * Resolves reverse relationships (from children to parent)
+ */
+declare type ResolveReverseRelationship<Schema extends GenericSchema, Relationships extends GenericRelationship[], Field extends Ast.FieldNode, CurrentTableOrView extends keyof TablesAndViews<Schema> & string> = FindFieldMatchingRelationships<Schema, Relationships, Field> extends infer FoundRelation ? FoundRelation extends never ? false : FoundRelation extends {
+    referencedRelation: infer RelatedRelationName;
+} ? RelatedRelationName extends string ? RelatedRelationName extends keyof TablesAndViews<Schema> ? FoundRelation extends {
+    hint: string;
+} ? {
+    referencedTable: TablesAndViews<Schema>[RelatedRelationName];
+    relation: FoundRelation;
+    direction: 'reverse';
+    from: CurrentTableOrView;
+} : HasMultipleFKeysToFRel<RelatedRelationName, Relationships> extends true ? SelectQueryError<`Could not embed because more than one relationship was found for '${RelatedRelationName}' and '${CurrentTableOrView}' you need to hint the column with ${RelatedRelationName}!<columnName> ?`> : {
+    referencedTable: TablesAndViews<Schema>[RelatedRelationName];
+    relation: FoundRelation;
+    direction: 'reverse';
+    from: CurrentTableOrView;
+} : SelectQueryError<`Relation '${RelatedRelationName}' not found in schema.`> : false : false : false;
+export declare type FindMatchingTableRelationships<Schema extends GenericSchema, Relationships extends GenericRelationship[], value extends string> = Relationships extends [infer R, ...infer Rest] ? Rest extends GenericRelationship[] ? R extends {
+    referencedRelation: infer ReferencedRelation;
+} ? ReferencedRelation extends keyof Schema['Tables'] ? R extends {
+    foreignKeyName: value;
+} ? R & {
+    match: 'fkname';
+} : R extends {
+    referencedRelation: value;
+} ? R & {
+    match: 'refrel';
+} : R extends {
+    columns: [value];
+} ? R & {
+    match: 'col';
+} : FindMatchingTableRelationships<Schema, Rest, value> : FindMatchingTableRelationships<Schema, Rest, value> : false : false : false;
+export declare type FindMatchingViewRelationships<Schema extends GenericSchema, Relationships extends GenericRelationship[], value extends string> = Relationships extends [infer R, ...infer Rest] ? Rest extends GenericRelationship[] ? R extends {
+    referencedRelation: infer ReferencedRelation;
+} ? ReferencedRelation extends keyof Schema['Views'] ? R extends {
+    foreignKeyName: value;
+} ? R & {
+    match: 'fkname';
+} : R extends {
+    referencedRelation: value;
+} ? R & {
+    match: 'refrel';
+} : R extends {
+    columns: [value];
+} ? R & {
+    match: 'col';
+} : FindMatchingViewRelationships<Schema, Rest, value> : FindMatchingViewRelationships<Schema, Rest, value> : false : false : false;
+export declare type FindMatchingHintTableRelationships<Schema extends GenericSchema, Relationships extends GenericRelationship[], hint extends string, name extends string> = Relationships extends [infer R, ...infer Rest] ? Rest extends GenericRelationship[] ? R extends {
+    referencedRelation: infer ReferencedRelation;
+} ? ReferencedRelation extends name ? R extends {
+    foreignKeyName: hint;
+} ? R & {
+    match: 'fkname';
+} : R extends {
+    referencedRelation: hint;
+} ? R & {
+    match: 'refrel';
+} : R extends {
+    columns: [hint];
+} ? R & {
+    match: 'col';
+} : FindMatchingHintTableRelationships<Schema, Rest, hint, name> : FindMatchingHintTableRelationships<Schema, Rest, hint, name> : false : false : false;
+export declare type FindMatchingHintViewRelationships<Schema extends GenericSchema, Relationships extends GenericRelationship[], hint extends string, name extends string> = Relationships extends [infer R, ...infer Rest] ? Rest extends GenericRelationship[] ? R extends {
+    referencedRelation: infer ReferencedRelation;
+} ? ReferencedRelation extends name ? R extends {
+    foreignKeyName: hint;
+} ? R & {
+    match: 'fkname';
+} : R extends {
+    referencedRelation: hint;
+} ? R & {
+    match: 'refrel';
+} : R extends {
+    columns: [hint];
+} ? R & {
+    match: 'col';
+} : FindMatchingHintViewRelationships<Schema, Rest, hint, name> : FindMatchingHintViewRelationships<Schema, Rest, hint, name> : false : false : false;
+declare type IsColumnsNullable<Table extends Pick<GenericTable, 'Row'>, Columns extends (keyof Table['Row'])[]> = Columns extends [infer Column, ...infer Rest] ? Column extends keyof Table['Row'] ? ContainsNull<Table['Row'][Column]> extends true ? true : IsColumnsNullable<Table, Rest extends (keyof Table['Row'])[] ? Rest : []> : false : false;
+export declare type IsRelationNullable<Table extends GenericTable, Relation extends GenericRelationship> = IsColumnsNullable<Table, Relation['columns']>;
+declare type TableForwardRelationships<Schema extends GenericSchema, TName> = TName extends keyof TablesAndViews<Schema> ? UnionToArray<RecursivelyFindRelationships<Schema, TName, keyof TablesAndViews<Schema>>> extends infer R ? R extends (GenericRelationship & {
+    from: keyof TablesAndViews<Schema>;
+})[] ? R : [] : [] : [];
+declare type RecursivelyFindRelationships<Schema extends GenericSchema, TName, Keys extends keyof TablesAndViews<Schema>> = Keys extends infer K ? K extends keyof TablesAndViews<Schema> ? FilterRelationships<TablesAndViews<Schema>[K]['Relationships'], TName, K> extends never ? RecursivelyFindRelationships<Schema, TName, Exclude<Keys, K>> : FilterRelationships<TablesAndViews<Schema>[K]['Relationships'], TName, K> | RecursivelyFindRelationships<Schema, TName, Exclude<Keys, K>> : false : false;
+declare type FilterRelationships<R, TName, From> = R extends readonly (infer Rel)[] ? Rel extends {
+    referencedRelation: TName;
+} ? Rel & {
+    from: From;
+} : never : never;
+export declare type ResolveForwardRelationship<Schema extends GenericSchema, Field extends Ast.FieldNode, CurrentTableOrView extends keyof TablesAndViews<Schema> & string> = FindFieldMatchingRelationships<Schema, TablesAndViews<Schema>[Field['name']]['Relationships'], Ast.FieldNode & {
+    name: CurrentTableOrView;
+    hint: Field['hint'];
+}> extends infer FoundByName ? FoundByName extends GenericRelationship ? {
+    referencedTable: TablesAndViews<Schema>[Field['name']];
+    relation: FoundByName;
+    direction: 'forward';
+    from: Field['name'];
+    type: 'found-by-name';
+} : FindFieldMatchingRelationships<Schema, TableForwardRelationships<Schema, CurrentTableOrView>, Field> extends infer FoundByMatch ? FoundByMatch extends GenericRelationship & {
+    from: keyof TablesAndViews<Schema>;
+} ? {
+    referencedTable: TablesAndViews<Schema>[FoundByMatch['from']];
+    relation: FoundByMatch;
+    direction: 'forward';
+    from: CurrentTableOrView;
+    type: 'found-by-match';
+} : FindJoinTableRelationship<Schema, CurrentTableOrView, Field['name']> extends infer FoundByJoinTable ? FoundByJoinTable extends GenericRelationship ? {
+    referencedTable: TablesAndViews<Schema>[FoundByJoinTable['referencedRelation']];
+    relation: FoundByJoinTable & {
+        match: 'refrel';
+    };
+    direction: 'forward';
+    from: CurrentTableOrView;
+    type: 'found-by-join-table';
+} : SelectQueryError<`could not find the relation between ${CurrentTableOrView} and ${Field['name']}`> : SelectQueryError<`could not find the relation between ${CurrentTableOrView} and ${Field['name']}`> : SelectQueryError<`could not find the relation between ${CurrentTableOrView} and ${Field['name']}`> : SelectQueryError<`could not find the relation between ${CurrentTableOrView} and ${Field['name']}`>;
+/**
+ * Given a CurrentTableOrView, finds all join tables to this relation.
+ * For example, if products and categories are linked via product_categories table:
+ *
+ * @example
+ * Given:
+ * - CurrentTableView = 'products'
+ * - FieldName = "categories"
+ *
+ * It should return this relationship from product_categories:
+ * {
+ *   foreignKeyName: "product_categories_category_id_fkey",
+ *   columns: ["category_id"],
+ *   isOneToOne: false,
+ *   referencedRelation: "categories",
+ *   referencedColumns: ["id"]
+ * }
+ */
+declare type ResolveJoinTableRelationship<Schema extends GenericSchema, CurrentTableOrView extends keyof TablesAndViews<Schema> & string, FieldName extends string> = {
+    [TableName in keyof TablesAndViews<Schema>]: DeduplicateRelationships<TablesAndViews<Schema>[TableName]['Relationships']> extends readonly (infer Rel)[] ? Rel extends {
+        referencedRelation: CurrentTableOrView;
+    } ? DeduplicateRelationships<TablesAndViews<Schema>[TableName]['Relationships']> extends readonly (infer OtherRel)[] ? OtherRel extends {
+        referencedRelation: FieldName;
+    } ? OtherRel : never : never : never : never;
+}[keyof TablesAndViews<Schema>];
+export declare type FindJoinTableRelationship<Schema extends GenericSchema, CurrentTableOrView extends keyof TablesAndViews<Schema> & string, FieldName extends string> = ResolveJoinTableRelationship<Schema, CurrentTableOrView, FieldName> extends infer Result ? [Result] extends [never] ? false : Result : never;
+/**
+ * Finds a matching relationship based on the FieldNode's name and optional hint.
+ */
+export declare type FindFieldMatchingRelationships<Schema extends GenericSchema, Relationships extends GenericRelationship[], Field extends Ast.FieldNode> = Field extends {
+    hint: string;
+} ? FindMatchingHintTableRelationships<Schema, Relationships, Field['hint'], Field['name']> extends GenericRelationship ? FindMatchingHintTableRelationships<Schema, Relationships, Field['hint'], Field['name']> & {
+    branch: 'found-in-table-via-hint';
+    hint: Field['hint'];
+} : FindMatchingHintViewRelationships<Schema, Relationships, Field['hint'], Field['name']> extends GenericRelationship ? FindMatchingHintViewRelationships<Schema, Relationships, Field['hint'], Field['name']> & {
+    branch: 'found-in-view-via-hint';
+    hint: Field['hint'];
+} : SelectQueryError<'Failed to find matching relation via hint'> : FindMatchingTableRelationships<Schema, Relationships, Field['name']> extends GenericRelationship ? FindMatchingTableRelationships<Schema, Relationships, Field['name']> & {
+    branch: 'found-in-table-via-name';
+    name: Field['name'];
+} : FindMatchingViewRelationships<Schema, Relationships, Field['name']> extends GenericRelationship ? FindMatchingViewRelationships<Schema, Relationships, Field['name']> & {
+    branch: 'found-in-view-via-name';
+    name: Field['name'];
+} : SelectQueryError<'Failed to find matching relation via name'>;
+export {};
+//# sourceMappingURL=utils.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/utils.d.ts.map b/dist/esm/select-query-parser/utils.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..a374ea838fdae27b814ed7adb4c5e88a070a9164
--- /dev/null
+++ b/dist/esm/select-query-parser/utils.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../../../src/select-query-parser/utils.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/utils.js b/dist/esm/select-query-parser/utils.js
new file mode 100644
index 0000000000000000000000000000000000000000..e6c75f0b7bf923de69499e8beee4d3238e2f66fc
--- /dev/null
+++ b/dist/esm/select-query-parser/utils.js
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/dist/esm/select-query-parser/utils.js.map b/dist/esm/select-query-parser/utils.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..445f7d5cec1b495c0c1f3e8bb84a70d7f9b428a0
--- /dev/null
+++ b/dist/esm/select-query-parser/utils.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/select-query-parser/utils.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/esm/select-query-parser.d.ts b/dist/esm/select-query-parser.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..dc391d8fe6a16b327b08b51cdf4df7234dd0310d
--- /dev/null
+++ b/dist/esm/select-query-parser.d.ts
@@ -0,0 +1,363 @@
+import { GenericSchema, Prettify } from './types';
+declare type Whitespace = ' ' | '\n' | '\t';
+declare type LowerAlphabet = 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z';
+declare type Alphabet = LowerAlphabet | Uppercase<LowerAlphabet>;
+declare type Digit = '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | '0';
+declare type Letter = Alphabet | Digit | '_';
+declare type Json = string | number | boolean | null | {
+    [key: string]: Json;
+} | Json[];
+declare type SingleValuePostgreSQLTypes = 'bool' | 'int2' | 'int4' | 'int8' | 'float4' | 'float8' | 'numeric' | 'bytea' | 'bpchar' | 'varchar' | 'date' | 'text' | 'citext' | 'time' | 'timetz' | 'timestamp' | 'timestamptz' | 'uuid' | 'vector' | 'json' | 'jsonb' | 'void' | 'record' | string;
+declare type ArrayPostgreSQLTypes = `_${SingleValuePostgreSQLTypes}`;
+declare type PostgreSQLTypes = SingleValuePostgreSQLTypes | ArrayPostgreSQLTypes;
+declare type TypeScriptSingleValueTypes<T extends SingleValuePostgreSQLTypes> = T extends 'bool' ? boolean : T extends 'int2' | 'int4' | 'int8' | 'float4' | 'float8' | 'numeric' ? number : T extends 'bytea' | 'bpchar' | 'varchar' | 'date' | 'text' | 'citext' | 'time' | 'timetz' | 'timestamp' | 'timestamptz' | 'uuid' | 'vector' ? string : T extends 'json' | 'jsonb' ? Json : T extends 'void' ? undefined : T extends 'record' ? Record<string, unknown> : unknown;
+declare type AggregateFunctions = 'count' | 'sum' | 'avg' | 'min' | 'max';
+declare type StripUnderscore<T extends string> = T extends `_${infer U}` ? U : T;
+declare type TypeScriptTypes<T extends PostgreSQLTypes> = T extends ArrayPostgreSQLTypes ? TypeScriptSingleValueTypes<StripUnderscore<Extract<T, SingleValuePostgreSQLTypes>>>[] : TypeScriptSingleValueTypes<T>;
+/**
+ * Parser errors.
+ */
+declare type ParserError<Message extends string> = {
+    error: true;
+} & Message;
+declare type GenericStringError = ParserError<'Received a generic string'>;
+export declare type SelectQueryError<Message extends string> = {
+    error: true;
+} & Message;
+/**
+ * Creates a new {@link ParserError} if the given input is not already a parser error.
+ */
+declare type CreateParserErrorIfRequired<Input, Message extends string> = Input extends ParserError<string> ? Input : ParserError<Message>;
+/**
+ * Trims whitespace from the left of the input.
+ */
+declare type EatWhitespace<Input extends string> = string extends Input ? GenericStringError : Input extends `${Whitespace}${infer Remainder}` ? EatWhitespace<Remainder> : Input;
+/**
+ * Returns a boolean representing whether there is a foreign key with the given name.
+ */
+declare type HasFKey<FKeyName, Relationships> = Relationships extends [infer R] ? R extends {
+    foreignKeyName: FKeyName;
+} ? true : false : Relationships extends [infer R, ...infer Rest] ? HasFKey<FKeyName, [R]> extends true ? true : HasFKey<FKeyName, Rest> : false;
+/**
+ * Returns a boolean representing whether there the foreign key has a unique constraint.
+ */
+declare type HasUniqueFKey<FKeyName, Relationships> = Relationships extends [infer R] ? R extends {
+    foreignKeyName: FKeyName;
+    isOneToOne: true;
+} ? true : false : Relationships extends [infer R, ...infer Rest] ? HasUniqueFKey<FKeyName, [R]> extends true ? true : HasUniqueFKey<FKeyName, Rest> : false;
+/**
+ * Returns a boolean representing whether there is a foreign key referencing
+ * a given relation.
+ */
+declare type HasFKeyToFRel<FRelName, Relationships> = Relationships extends [infer R] ? R extends {
+    referencedRelation: FRelName;
+} ? true : false : Relationships extends [infer R, ...infer Rest] ? HasFKeyToFRel<FRelName, [R]> extends true ? true : HasFKeyToFRel<FRelName, Rest> : false;
+declare type HasUniqueFKeyToFRel<FRelName, Relationships> = Relationships extends [infer R] ? R extends {
+    referencedRelation: FRelName;
+    isOneToOne: true;
+} ? true : false : Relationships extends [infer R, ...infer Rest] ? HasUniqueFKeyToFRel<FRelName, [R]> extends true ? true : HasUniqueFKeyToFRel<FRelName, Rest> : false;
+/**
+ * Constructs a type definition for a single field of an object.
+ *
+ * @param Schema Database schema.
+ * @param Row Type of a row in the given table.
+ * @param Relationships Relationships between different tables in the database.
+ * @param Field Single field parsed by `ParseQuery`.
+ */
+declare type ConstructFieldDefinition<Schema extends GenericSchema, Row extends Record<string, unknown>, RelationName, Relationships, Field> = Field extends {
+    star: true;
+} ? Row : Field extends {
+    spread: true;
+    original: string;
+    children: unknown[];
+} ? GetResultHelper<Schema, (Schema['Tables'] & Schema['Views'])[Field['original']]['Row'], Field['original'], (Schema['Tables'] & Schema['Views'])[Field['original']] extends {
+    Relationships: infer R;
+} ? R : unknown, Field['children'], unknown> : Field extends {
+    children: [];
+} ? {} : Field extends {
+    name: string;
+    original: string;
+    hint: string;
+    children: unknown[];
+} ? {
+    [_ in Field['name']]: GetResultHelper<Schema, (Schema['Tables'] & Schema['Views'])[Field['original']]['Row'], Field['original'], (Schema['Tables'] & Schema['Views'])[Field['original']] extends {
+        Relationships: infer R;
+    } ? R : unknown, Field['children'], unknown> extends infer Child ? HasUniqueFKey<Field['hint'], (Schema['Tables'] & Schema['Views'])[Field['original']] extends {
+        Relationships: infer R;
+    } ? R : unknown> extends true ? Field extends {
+        inner: true;
+    } ? Child : Child | null : Relationships extends unknown[] ? HasFKey<Field['hint'], Relationships> extends true ? Field extends {
+        inner: true;
+    } ? Child : Child | null : Child[] : Child[] : never;
+} : Field extends {
+    name: string;
+    original: string;
+    children: unknown[];
+} ? {
+    [_ in Field['name']]: GetResultHelper<Schema, (Schema['Tables'] & Schema['Views'])[Field['original']]['Row'], Field['original'], (Schema['Tables'] & Schema['Views'])[Field['original']] extends {
+        Relationships: infer R;
+    } ? R : unknown, Field['children'], unknown> extends infer Child ? HasUniqueFKeyToFRel<RelationName, (Schema['Tables'] & Schema['Views'])[Field['original']] extends {
+        Relationships: infer R;
+    } ? R : unknown> extends true ? Field extends {
+        inner: true;
+    } ? Child : Child | null : Relationships extends unknown[] ? HasFKeyToFRel<Field['original'], Relationships> extends true ? Field extends {
+        inner: true;
+    } ? Child : Field extends {
+        left: true;
+    } ? // TODO: This should return null only if the column is actually nullable
+    Child | null : Child | null : Child[] : Child[] : never;
+} : Field extends {
+    name: string;
+    type: infer T;
+} ? {
+    [K in Field['name']]: T;
+} : Field extends {
+    name: string;
+    original: string;
+} ? Field['original'] extends keyof Row ? {
+    [K in Field['name']]: Row[Field['original']];
+} : Field['original'] extends 'count' ? {
+    count: number;
+} : SelectQueryError<`Referencing missing column \`${Field['original']}\``> : Record<string, unknown>;
+/**
+ * Notes: all `Parse*` types assume that their input strings have their whitespace
+ * removed. They return tuples of ["Return Value", "Remainder of text"] or
+ * a `ParserError`.
+ */
+/**
+ * Reads a consecutive sequence of 1 or more letter, where letters are `[0-9a-zA-Z_]`.
+ */
+declare type ReadLetters<Input extends string> = string extends Input ? GenericStringError : ReadLettersHelper<Input, ''> extends [`${infer Letters}`, `${infer Remainder}`] ? Letters extends '' ? ParserError<`Expected letter at \`${Input}\``> : [Letters, Remainder] : ReadLettersHelper<Input, ''>;
+declare type ReadLettersHelper<Input extends string, Acc extends string> = string extends Input ? GenericStringError : Input extends `${infer L}${infer Remainder}` ? L extends Letter ? ReadLettersHelper<Remainder, `${Acc}${L}`> : [Acc, Input] : [Acc, ''];
+/**
+ * Reads a consecutive sequence of 1 or more double-quoted letters,
+ * where letters are `[^"]`.
+ */
+declare type ReadQuotedLetters<Input extends string> = string extends Input ? GenericStringError : Input extends `"${infer Remainder}` ? ReadQuotedLettersHelper<Remainder, ''> extends [`${infer Letters}`, `${infer Remainder}`] ? Letters extends '' ? ParserError<`Expected string at \`${Remainder}\``> : [Letters, Remainder] : ReadQuotedLettersHelper<Remainder, ''> : ParserError<`Not a double-quoted string at \`${Input}\``>;
+declare type ReadQuotedLettersHelper<Input extends string, Acc extends string> = string extends Input ? GenericStringError : Input extends `${infer L}${infer Remainder}` ? L extends '"' ? [Acc, Remainder] : ReadQuotedLettersHelper<Remainder, `${Acc}${L}`> : ParserError<`Missing closing double-quote in \`"${Acc}${Input}\``>;
+/**
+ * Parses a (possibly double-quoted) identifier.
+ * Identifiers are sequences of 1 or more letters.
+ */
+declare type ParseIdentifier<Input extends string> = ReadLetters<Input> extends [
+    infer Name,
+    `${infer Remainder}`
+] ? [Name, `${Remainder}`] : ReadQuotedLetters<Input> extends [infer Name, `${infer Remainder}`] ? [Name, `${Remainder}`] : ParserError<`No (possibly double-quoted) identifier at \`${Input}\``>;
+/**
+ * Parses a field without preceding field renaming.
+ * A field is one of the following:
+ * - a field with an embedded resource
+ *   - `field(nodes)`
+ *   - `field!hint(nodes)`
+ *   - `field!inner(nodes)`
+ *   - `field!left(nodes)`
+ *   - `field!hint!inner(nodes)`
+ * - a field without an embedded resource (see {@link ParseFieldWithoutEmbeddedResource})
+ */
+declare type ParseField<Input extends string> = Input extends '' ? ParserError<'Empty string'> : ParseIdentifier<Input> extends [infer Name, `${infer Remainder}`] ? EatWhitespace<Remainder> extends `!inner${infer Remainder}` ? ParseEmbeddedResource<EatWhitespace<Remainder>> extends [infer Fields, `${infer Remainder}`] ? [
+    {
+        name: Name;
+        original: Name;
+        children: Fields;
+        inner: true;
+    },
+    EatWhitespace<Remainder>
+] : CreateParserErrorIfRequired<ParseEmbeddedResource<EatWhitespace<Remainder>>, 'Expected embedded resource after `!inner`'> : EatWhitespace<Remainder> extends `!left${infer Remainder}` ? ParseEmbeddedResource<EatWhitespace<Remainder>> extends [infer Fields, `${infer Remainder}`] ? [
+    {
+        name: Name;
+        original: Name;
+        children: Fields;
+        left: true;
+    },
+    EatWhitespace<Remainder>
+] : CreateParserErrorIfRequired<ParseEmbeddedResource<EatWhitespace<Remainder>>, 'Expected embedded resource after `!left`'> : EatWhitespace<Remainder> extends `!${infer Remainder}` ? ParseIdentifier<EatWhitespace<Remainder>> extends [infer Hint, `${infer Remainder}`] ? EatWhitespace<Remainder> extends `!inner${infer Remainder}` ? ParseEmbeddedResource<EatWhitespace<Remainder>> extends [
+    infer Fields,
+    `${infer Remainder}`
+] ? [
+    {
+        name: Name;
+        original: Name;
+        hint: Hint;
+        children: Fields;
+        inner: true;
+    },
+    EatWhitespace<Remainder>
+] : CreateParserErrorIfRequired<ParseEmbeddedResource<EatWhitespace<Remainder>>, 'Expected embedded resource after `!inner`'> : ParseEmbeddedResource<EatWhitespace<Remainder>> extends [
+    infer Fields,
+    `${infer Remainder}`
+] ? [
+    {
+        name: Name;
+        original: Name;
+        hint: Hint;
+        children: Fields;
+    },
+    EatWhitespace<Remainder>
+] : CreateParserErrorIfRequired<ParseEmbeddedResource<EatWhitespace<Remainder>>, 'Expected embedded resource after `!hint`'> : ParserError<'Expected identifier after `!`'> : ParseEmbeddedResource<EatWhitespace<Remainder>> extends [infer Fields, `${infer Remainder}`] ? [
+    {
+        name: Name;
+        original: Name;
+        children: Fields;
+    },
+    EatWhitespace<Remainder>
+] : ParseEmbeddedResource<EatWhitespace<Remainder>> extends ParserError<string> ? ParseEmbeddedResource<EatWhitespace<Remainder>> : ParseFieldWithoutEmbeddedResource<Input> : ParserError<`Expected identifier at \`${Input}\``>;
+/**
+ * Parses a field excluding embedded resources, without preceding field renaming.
+ * This is one of the following:
+ * - `field`
+ * - `field.aggregate()`
+ * - `field.aggregate()::type`
+ * - `field::type`
+ * - `field::type.aggregate()`
+ * - `field::type.aggregate()::type`
+ * - `field->json...`
+ * - `field->json.aggregate()`
+ * - `field->json.aggregate()::type`
+ * - `field->json::type`
+ * - `field->json::type.aggregate()`
+ * - `field->json::type.aggregate()::type`
+ */
+declare type ParseFieldWithoutEmbeddedResource<Input extends string> = ParseFieldWithoutEmbeddedResourceAndAggregation<Input> extends [infer Field, `${infer Remainder}`] ? ParseFieldAggregation<EatWhitespace<Remainder>> extends [
+    `${infer AggregateFunction}`,
+    `${infer Remainder}`
+] ? ParseFieldTypeCast<EatWhitespace<Remainder>> extends [infer Type, `${infer Remainder}`] ? [
+    Omit<Field, 'name' | 'original' | 'type'> & {
+        name: AggregateFunction;
+        original: AggregateFunction;
+        type: Type;
+    },
+    EatWhitespace<Remainder>
+] : ParseFieldTypeCast<EatWhitespace<Remainder>> extends ParserError<string> ? ParseFieldTypeCast<EatWhitespace<Remainder>> : [
+    Omit<Field, 'name' | 'original'> & {
+        name: AggregateFunction;
+        original: AggregateFunction;
+    },
+    EatWhitespace<Remainder>
+] : ParseFieldAggregation<EatWhitespace<Remainder>> extends ParserError<string> ? ParseFieldAggregation<EatWhitespace<Remainder>> : [
+    Field,
+    EatWhitespace<Remainder>
+] : CreateParserErrorIfRequired<ParseFieldWithoutEmbeddedResourceAndAggregation<Input>, `Expected field at \`${Input}\``>;
+/**
+ * Parses a field excluding embedded resources or aggregation, without preceding field renaming.
+ * This is one of the following:
+ * - `field`
+ * - `field::type`
+ * - `field->json...`
+ * - `field->json...::type`
+ */
+declare type ParseFieldWithoutEmbeddedResourceAndAggregation<Input extends string> = ParseFieldWithoutEmbeddedResourceAndTypeCast<Input> extends [infer Field, `${infer Remainder}`] ? ParseFieldTypeCast<EatWhitespace<Remainder>> extends [infer Type, `${infer Remainder}`] ? [
+    Omit<Field, 'type'> & {
+        type: Type;
+    },
+    EatWhitespace<Remainder>
+] : ParseFieldTypeCast<EatWhitespace<Remainder>> extends ParserError<string> ? ParseFieldTypeCast<EatWhitespace<Remainder>> : [
+    Field,
+    EatWhitespace<Remainder>
+] : CreateParserErrorIfRequired<ParseFieldWithoutEmbeddedResourceAndTypeCast<Input>, `Expected field at \`${Input}\``>;
+/**
+ * Parses a field excluding embedded resources or typecasting, without preceding field renaming.
+ * This is one of the following:
+ * - `field`
+ * - `field->json...`
+ */
+declare type ParseFieldWithoutEmbeddedResourceAndTypeCast<Input extends string> = ParseIdentifier<Input> extends [infer Name, `${infer Remainder}`] ? ParseJsonAccessor<EatWhitespace<Remainder>> extends [
+    infer PropertyName,
+    infer PropertyType,
+    `${infer Remainder}`
+] ? [
+    {
+        name: PropertyName;
+        original: PropertyName;
+        type: PropertyType;
+    },
+    EatWhitespace<Remainder>
+] : [
+    {
+        name: Name;
+        original: Name;
+    },
+    EatWhitespace<Remainder>
+] : ParserError<`Expected field at \`${Input}\``>;
+/**
+ * Parses a field typecast (`::type`), returning a tuple of ["Type", "Remainder of text"]
+ * or the original string input indicating that no typecast was found.
+ */
+declare type ParseFieldTypeCast<Input extends string> = EatWhitespace<Input> extends `::${infer Remainder}` ? ParseIdentifier<EatWhitespace<Remainder>> extends [`${infer CastType}`, `${infer Remainder}`] ? CastType extends PostgreSQLTypes ? [TypeScriptTypes<CastType>, EatWhitespace<Remainder>] : ParserError<`Invalid type for \`::\` operator \`${CastType}\``> : ParserError<`Invalid type for \`::\` operator at \`${Remainder}\``> : Input;
+/**
+ * Parses a field aggregation (`.max()`), returning a tuple of ["Aggregate function", "Remainder of text"]
+ * or the original string input indicating that no aggregation was found.
+ */
+declare type ParseFieldAggregation<Input extends string> = EatWhitespace<Input> extends `.${infer Remainder}` ? ParseIdentifier<EatWhitespace<Remainder>> extends [
+    `${infer FunctionName}`,
+    `${infer Remainder}`
+] ? FunctionName extends AggregateFunctions ? EatWhitespace<Remainder> extends `()${infer Remainder}` ? [FunctionName, EatWhitespace<Remainder>] : ParserError<`Expected \`()\` after \`.\` operator \`${FunctionName}\``> : ParserError<`Invalid type for \`.\` operator \`${FunctionName}\``> : ParserError<`Invalid type for \`.\` operator at \`${Remainder}\``> : Input;
+/**
+ * Parses a node.
+ * A node is one of the following:
+ * - `*`
+ * - a field, as defined above
+ * - a renamed field, `renamed_field:field`
+ * - a spread field, `...field`
+ */
+declare type ParseNode<Input extends string> = Input extends '' ? ParserError<'Empty string'> : Input extends `*${infer Remainder}` ? [{
+    star: true;
+}, EatWhitespace<Remainder>] : Input extends `...${infer Remainder}` ? ParseField<EatWhitespace<Remainder>> extends [infer Field, `${infer Remainder}`] ? Field extends {
+    children: unknown[];
+} ? [Prettify<{
+    spread: true;
+} & Field>, EatWhitespace<Remainder>] : ParserError<'Unable to parse spread resource'> : ParserError<'Unable to parse spread resource'> : ParseIdentifier<Input> extends [infer Name, `${infer Remainder}`] ? EatWhitespace<Remainder> extends `::${infer _Remainder}` ? ParseField<Input> : EatWhitespace<Remainder> extends `:${infer Remainder}` ? ParseField<EatWhitespace<Remainder>> extends [infer Field, `${infer Remainder}`] ? Field extends {
+    name: string;
+} ? [Prettify<Omit<Field, 'name'> & {
+    name: Name;
+}>, EatWhitespace<Remainder>] : ParserError<`Unable to parse renamed field`> : ParserError<`Unable to parse renamed field`> : ParseField<Input> : ParserError<`Expected identifier at \`${Input}\``>;
+/**
+ * Parses a JSON property accessor of the shape `->a->b->c`. The last accessor in
+ * the series may convert to text by using the ->> operator instead of ->.
+ *
+ * Returns a tuple of ["Last property name", "Last property type", "Remainder of text"]
+ * or the original string input indicating that no opening `->` was found.
+ */
+declare type ParseJsonAccessor<Input extends string> = Input extends `->${infer Remainder}` ? Remainder extends `>${infer Remainder}` ? ParseIdentifier<Remainder> extends [infer Name, `${infer Remainder}`] ? [Name, string, EatWhitespace<Remainder>] : ParserError<'Expected property name after `->>`'> : ParseIdentifier<Remainder> extends [infer Name, `${infer Remainder}`] ? ParseJsonAccessor<Remainder> extends [
+    infer PropertyName,
+    infer PropertyType,
+    `${infer Remainder}`
+] ? [PropertyName, PropertyType, EatWhitespace<Remainder>] : [Name, Json, EatWhitespace<Remainder>] : ParserError<'Expected property name after `->`'> : Input;
+/**
+ * Parses an embedded resource, which is an opening `(`, followed by a sequence of
+ * 0 or more nodes separated by `,`, then a closing `)`.
+ *
+ * Returns a tuple of ["Parsed fields", "Remainder of text"], an error,
+ * or the original string input indicating that no opening `(` was found.
+ */
+declare type ParseEmbeddedResource<Input extends string> = Input extends `(${infer Remainder}` ? ParseNodes<EatWhitespace<Remainder>> extends [infer Fields, `${infer Remainder}`] ? EatWhitespace<Remainder> extends `)${infer Remainder}` ? [Fields, EatWhitespace<Remainder>] : ParserError<`Expected ")"`> : ParseNodes<EatWhitespace<Remainder>> extends ParserError<string> ? EatWhitespace<Remainder> extends `)${infer Remainder}` ? [[], EatWhitespace<Remainder>] : ParseNodes<EatWhitespace<Remainder>> : ParserError<'Expected embedded resource fields or `)`'> : Input;
+/**
+ * Parses a sequence of nodes, separated by `,`.
+ *
+ * Returns a tuple of ["Parsed fields", "Remainder of text"] or an error.
+ */
+declare type ParseNodes<Input extends string> = string extends Input ? GenericStringError : ParseNodesHelper<Input, []>;
+declare type ParseNodesHelper<Input extends string, Fields extends unknown[]> = ParseNode<Input> extends [
+    infer Field,
+    `${infer Remainder}`
+] ? EatWhitespace<Remainder> extends `,${infer Remainder}` ? ParseNodesHelper<EatWhitespace<Remainder>, [Field, ...Fields]> : [[Field, ...Fields], EatWhitespace<Remainder>] : ParseNode<Input>;
+/**
+ * Parses a query.
+ * A query is a sequence of nodes, separated by `,`, ensuring that there is
+ * no remaining input after all nodes have been parsed.
+ *
+ * Returns an array of parsed nodes, or an error.
+ */
+declare type ParseQuery<Query extends string> = string extends Query ? GenericStringError : ParseNodes<EatWhitespace<Query>> extends [infer Fields, `${infer Remainder}`] ? EatWhitespace<Remainder> extends '' ? Fields : ParserError<`Unexpected input: ${Remainder}`> : ParseNodes<EatWhitespace<Query>>;
+declare type GetResultHelper<Schema extends GenericSchema, Row extends Record<string, unknown>, RelationName, Relationships, Fields extends unknown[], Acc> = Fields extends [infer R] ? ConstructFieldDefinition<Schema, Row, RelationName, Relationships, R> extends SelectQueryError<infer E> ? SelectQueryError<E> : GetResultHelper<Schema, Row, RelationName, Relationships, [
+], ConstructFieldDefinition<Schema, Row, RelationName, Relationships, R> & Acc> : Fields extends [infer R, ...infer Rest] ? ConstructFieldDefinition<Schema, Row, RelationName, Relationships, R> extends SelectQueryError<infer E> ? SelectQueryError<E> : GetResultHelper<Schema, Row, RelationName, Relationships, Rest, ConstructFieldDefinition<Schema, Row, RelationName, Relationships, R> & Acc> : Prettify<Acc>;
+/**
+ * Constructs a type definition for an object based on a given PostgREST query.
+ *
+ * @param Schema Database schema.
+ * @param Row Type of a row in the given table.
+ * @param Relationships Relationships between different tables in the database.
+ * @param Query Select query string literal to parse.
+ */
+export declare type GetResult<Schema extends GenericSchema, Row extends Record<string, unknown>, RelationName, Relationships, Query extends string> = ParseQuery<Query> extends unknown[] ? GetResultHelper<Schema, Row, RelationName, Relationships, ParseQuery<Query>, unknown> : ParseQuery<Query>;
+export {};
+//# sourceMappingURL=select-query-parser.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/select-query-parser.d.ts.map b/dist/esm/select-query-parser.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..3a3ba9461ca73a171722b2290c3413a2442c0e25
--- /dev/null
+++ b/dist/esm/select-query-parser.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"select-query-parser.d.ts","sourceRoot":"","sources":["../../src/select-query-parser.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/esm/select-query-parser.js b/dist/esm/select-query-parser.js
new file mode 100644
index 0000000000000000000000000000000000000000..5c308d3a36da0b29c2e1e0ce0674e87943f276b9
--- /dev/null
+++ b/dist/esm/select-query-parser.js
@@ -0,0 +1,4 @@
+// Credits to @bnjmnt4n (https://www.npmjs.com/package/postgrest-query)
+// See https://github.com/PostgREST/postgrest/blob/2f91853cb1de18944a4556df09e52450b881cfb3/src/PostgREST/ApiRequest/QueryParams.hs#L282-L284
+export {};
+//# sourceMappingURL=select-query-parser.js.map
\ No newline at end of file
diff --git a/dist/esm/select-query-parser.js.map b/dist/esm/select-query-parser.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..557bf637d578ce748b9eff6e2f05e55c5d057d27
--- /dev/null
+++ b/dist/esm/select-query-parser.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"select-query-parser.js","sourceRoot":"","sources":["../../src/select-query-parser.ts"],"names":[],"mappings":"AAAA,uEAAuE;AACvE,6IAA6I"}
\ No newline at end of file
diff --git a/dist/esm/types.d.ts b/dist/esm/types.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..649fd86b5f7c6a667af97ac4271e85e53e8e86bf
--- /dev/null
+++ b/dist/esm/types.d.ts
@@ -0,0 +1,52 @@
+import PostgrestError from './PostgrestError';
+export declare type Fetch = typeof fetch;
+/**
+ * Response format
+ *
+ * {@link https://github.com/supabase/supabase-js/issues/32}
+ */
+interface PostgrestResponseBase {
+    status: number;
+    statusText: string;
+}
+export interface PostgrestResponseSuccess<T> extends PostgrestResponseBase {
+    error: null;
+    data: T;
+    count: number | null;
+}
+export interface PostgrestResponseFailure extends PostgrestResponseBase {
+    error: PostgrestError;
+    data: null;
+    count: null;
+}
+export declare type PostgrestSingleResponse<T> = PostgrestResponseSuccess<T> | PostgrestResponseFailure;
+export declare type PostgrestMaybeSingleResponse<T> = PostgrestSingleResponse<T | null>;
+export declare type PostgrestResponse<T> = PostgrestSingleResponse<T[]>;
+export declare type GenericTable = {
+    Row: Record<string, unknown>;
+    Insert: Record<string, unknown>;
+    Update: Record<string, unknown>;
+};
+export declare type GenericUpdatableView = {
+    Row: Record<string, unknown>;
+    Insert: Record<string, unknown>;
+    Update: Record<string, unknown>;
+};
+export declare type GenericNonUpdatableView = {
+    Row: Record<string, unknown>;
+};
+export declare type GenericView = GenericUpdatableView | GenericNonUpdatableView;
+export declare type GenericFunction = {
+    Args: Record<string, unknown>;
+    Returns: unknown;
+};
+export declare type GenericSchema = {
+    Tables: Record<string, GenericTable>;
+    Views: Record<string, GenericView>;
+    Functions: Record<string, GenericFunction>;
+};
+export declare type Prettify<T> = {
+    [K in keyof T]: T[K];
+} & {};
+export {};
+//# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/types.d.ts.map b/dist/esm/types.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..5e5fc09287fc39d409d32989d6ca26fea138927c
--- /dev/null
+++ b/dist/esm/types.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,MAAM,kBAAkB,CAAA;AAE7C,oBAAY,KAAK,GAAG,OAAO,KAAK,CAAA;AAEhC;;;;GAIG;AACH,UAAU,qBAAqB;IAC7B,MAAM,EAAE,MAAM,CAAA;IACd,UAAU,EAAE,MAAM,CAAA;CACnB;AACD,MAAM,WAAW,wBAAwB,CAAC,CAAC,CAAE,SAAQ,qBAAqB;IACxE,KAAK,EAAE,IAAI,CAAA;IACX,IAAI,EAAE,CAAC,CAAA;IACP,KAAK,EAAE,MAAM,GAAG,IAAI,CAAA;CACrB;AACD,MAAM,WAAW,wBAAyB,SAAQ,qBAAqB;IACrE,KAAK,EAAE,cAAc,CAAA;IACrB,IAAI,EAAE,IAAI,CAAA;IACV,KAAK,EAAE,IAAI,CAAA;CACZ;AAKD,oBAAY,uBAAuB,CAAC,CAAC,IAAI,wBAAwB,CAAC,CAAC,CAAC,GAAG,wBAAwB,CAAA;AAC/F,oBAAY,4BAA4B,CAAC,CAAC,IAAI,uBAAuB,CAAC,CAAC,GAAG,IAAI,CAAC,CAAA;AAC/E,oBAAY,iBAAiB,CAAC,CAAC,IAAI,uBAAuB,CAAC,CAAC,EAAE,CAAC,CAAA;AAE/D,oBAAY,YAAY,GAAG;IACzB,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IAC5B,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IAC/B,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;CAChC,CAAA;AAED,oBAAY,oBAAoB,GAAG;IACjC,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IAC5B,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IAC/B,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;CAChC,CAAA;AAED,oBAAY,uBAAuB,GAAG;IACpC,GAAG,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;CAC7B,CAAA;AAED,oBAAY,WAAW,GAAG,oBAAoB,GAAG,uBAAuB,CAAA;AAExE,oBAAY,eAAe,GAAG;IAC5B,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;IAC7B,OAAO,EAAE,OAAO,CAAA;CACjB,CAAA;AAED,oBAAY,aAAa,GAAG;IAC1B,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;IACpC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAA;IAClC,SAAS,EAAE,MAAM,CAAC,MAAM,EAAE,eAAe,CAAC,CAAA;CAC3C,CAAA;AAGD,oBAAY,QAAQ,CAAC,CAAC,IAAI;KAAG,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;CAAE,GAAG,EAAE,CAAA"}
\ No newline at end of file
diff --git a/dist/esm/types.js b/dist/esm/types.js
new file mode 100644
index 0000000000000000000000000000000000000000..718fd38ae40c67ea23b242517cf9919f602c5a3e
--- /dev/null
+++ b/dist/esm/types.js
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/dist/esm/types.js.map b/dist/esm/types.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..7b5fff867a5a8de2324d2c0521b7c2292da35535
--- /dev/null
+++ b/dist/esm/types.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/esm/version.d.ts b/dist/esm/version.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..7e06b6b583ca2f4881da2a83a56b8dd9e29095d8
--- /dev/null
+++ b/dist/esm/version.d.ts
@@ -0,0 +1,2 @@
+export declare const version = "1.16.3";
+//# sourceMappingURL=version.d.ts.map
\ No newline at end of file
diff --git a/dist/esm/version.d.ts.map b/dist/esm/version.d.ts.map
new file mode 100644
index 0000000000000000000000000000000000000000..8d2229a8e47b0b347db23d71e93cc90169137614
--- /dev/null
+++ b/dist/esm/version.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"version.d.ts","sourceRoot":"","sources":["../../src/version.ts"],"names":[],"mappings":"AAAA,eAAO,MAAM,OAAO,WAAW,CAAA"}
\ No newline at end of file
diff --git a/dist/esm/version.js b/dist/esm/version.js
new file mode 100644
index 0000000000000000000000000000000000000000..67e1c682fa3b86bf8cdc2f21ea3c8f545ac698d6
--- /dev/null
+++ b/dist/esm/version.js
@@ -0,0 +1,2 @@
+export const version = '1.16.3';
+//# sourceMappingURL=version.js.map
\ No newline at end of file
diff --git a/dist/esm/version.js.map b/dist/esm/version.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..17eb82d8b77a25940711c259f55b05dc1d08f1f2
--- /dev/null
+++ b/dist/esm/version.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"version.js","sourceRoot":"","sources":["../../src/version.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,OAAO,GAAG,QAAQ,CAAA"}
\ No newline at end of file
diff --git a/dist/esm/wrapper.mjs b/dist/esm/wrapper.mjs
deleted file mode 100644
index 55629686f039b4797e232de06bf5cbbf52b1700e..0000000000000000000000000000000000000000
diff --git a/package.json b/package.json
index 68c60f3b53d68768ab4dcbaa3c1725a99d90eae4..77f131fdf0975bcc64d186bf79de481dc7ae481d 100644
--- a/package.json
+++ b/package.json
@@ -15,11 +15,11 @@
     "src"
   ],
   "main": "dist/cjs/index.js",
-  "module": "dist/esm/wrapper.mjs",
+  "module": "dist/esm/index.js",
   "exports": {
     "import": {
-      "types": "./dist/cjs/index.d.ts",
-      "default": "./dist/esm/wrapper.mjs"
+      "types": "./dist/esm/index.d.ts",
+      "default": "./dist/esm/index.js"
     },
     "require": {
       "types": "./dist/cjs/index.d.ts",
@@ -34,7 +34,7 @@
     "format:check": "prettier --check \"{src,test}/**/*.ts\"",
     "build": "run-s clean format build:*",
     "build:cjs": "tsc -p tsconfig.json",
-    "build:esm": "cpy wrapper.mjs dist/esm/",
+    "build:esm": "tsc -p tsconfig.module.json",
     "docs": "typedoc src/index.ts --out docs/v2",
     "docs:json": "typedoc --json docs/v2/spec.json --excludeExternals src/index.ts",
     "test": "run-s format:check test:types db:clean db:run test:run db:clean && node test/smoke.cjs && node test/smoke.mjs",
